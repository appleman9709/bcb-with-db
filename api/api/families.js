// –°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–µ–º–µ–π
import { supabase } from '../lib/supabase.js'

export default async function handler(req, res) {
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º CORS
    res.setHeader('Access-Control-Allow-Origin', '*')
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type')

    if (req.method === 'OPTIONS') {
        res.status(200).end()
        return
    }

    if (req.method === 'GET') {
        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–µ–º–µ–π
        try {
            console.log('üîç –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–µ–º–µ–π')
            
            const { data: families, error } = await supabase
                .from('families')
                .select('id, name')
                .order('name')

            if (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ Supabase:', error)
                return res.status(500).json({ error: error.message })
            }

            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–µ–º–µ–π: ${families.length}`)
            for (const family of families) {
                console.log(`   ‚Ä¢ ID: ${family.id}, –ù–∞–∑–≤–∞–Ω–∏–µ: ${family.name}`)
            }

            res.status(200).json({ families })
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤ get_families:', error)
            res.status(500).json({ error: error.message })
        }
    } else if (req.method === 'POST') {
        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ–º—å–∏
        try {
            const { name } = req.body
            
            if (!name) {
                return res.status(400).json({ error: 'Name is required' })
            }

            console.log(`üè† –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–º—å–∏: ${name}`)
            
            const { data: family, error } = await supabase
                .from('families')
                .insert([{ name }])
                .select()
                .single()

            if (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–º—å–∏:', error)
                return res.status(500).json({ error: error.message })
            }

            console.log(`‚úÖ –°–µ–º—å—è —Å–æ–∑–¥–∞–Ω–∞ —Å ID: ${family.id}`)
            res.status(201).json(family)
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–º—å–∏:', error)
            res.status(500).json({ error: error.message })
        }
    } else {
        res.status(405).json({ error: 'Method not allowed' })
    }
}