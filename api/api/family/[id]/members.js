import { createClient } from '@supabase/supabase-js'

const supabaseUrl = process.env.SUPABASE_URL
const supabaseKey = process.env.SUPABASE_ANON_KEY

const supabase = createClient(supabaseUrl, supabaseKey)

export default async function handler(req, res) {
  // CORS headers
  res.setHeader('Access-Control-Allow-Origin', '*')
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS')
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization')

  if (req.method === 'OPTIONS') {
    res.status(200).end()
    return
  }

  try {
    const { id: familyId } = req.query

    if (!familyId) {
      return res.status(400).json({ error: 'ID —Å–µ–º—å–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' })
    }

    if (req.method === 'GET') {
      // –ü–æ–ª—É—á–∞–µ–º —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏
      const { data: members, error } = await supabase
        .from('family_members')
        .select('*')
        .eq('family_id', familyId)
        .order('created_at', { ascending: false })

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏:', error)
        return res.status(500).json({ error: error.message })
      }

      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏: ${members.length}`)
      res.status(200).json({ members })

    } else if (req.method === 'POST') {
      // –î–æ–±–∞–≤–ª—è–µ–º —á–ª–µ–Ω–∞ —Å–µ–º—å–∏
      const { user_id, name, role } = req.body

      if (!user_id || !name) {
        return res.status(400).json({ error: 'user_id –∏ name –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' })
      }

      console.log(`üë• –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–ª–µ–Ω–∞ —Å–µ–º—å–∏ –¥–ª—è —Å–µ–º—å–∏ ${familyId}`)
      
      const { data: member, error } = await supabase
        .from('family_members')
        .insert([{
          family_id: parseInt(familyId),
          user_id,
          name,
          role: role || '–†–æ–¥–∏—Ç–µ–ª—å'
        }])
        .select()
        .single()

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–ª–µ–Ω–∞ —Å–µ–º—å–∏:', error)
        return res.status(500).json({ error: error.message })
      }

      console.log(`‚úÖ –ß–ª–µ–Ω —Å–µ–º—å–∏ –¥–æ–±–∞–≤–ª–µ–Ω —Å ID: ${member.id}`)
      res.status(201).json(member)

    } else {
      res.status(405).json({ error: 'Method not allowed' })
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ API:', error)
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' })
  }
}