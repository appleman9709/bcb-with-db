from telethon import TelegramClient, events, Button
from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import asyncio
import random
import threading
import time
import http.server
import socketserver
import pytz
import subprocess
import requests
import json

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_ID = os.getenv('API_ID')
API_HASH = os.getenv('API_HASH')
BOT_TOKEN = os.getenv('BOT_TOKEN')
SUPABASE_URL = os.getenv('SUPABASE_URL')
SUPABASE_KEY = os.getenv('SUPABASE_KEY')

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not all([API_ID, API_HASH, BOT_TOKEN, SUPABASE_URL, SUPABASE_KEY]):
    print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
    print("üìù –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ .env —Ñ–∞–π–ª–µ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:")
    print("   ‚Ä¢ API_ID")
    print("   ‚Ä¢ API_HASH") 
    print("   ‚Ä¢ BOT_TOKEN")
    print("   ‚Ä¢ SUPABASE_URL")
    print("   ‚Ä¢ SUPABASE_KEY")
    print("üîß –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ env_example.txt")
    exit(1)

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º API_ID –≤ —á–∏—Å–ª–æ
try:
    API_ID = int(API_ID)
except ValueError:
    print("‚ùå –û–®–ò–ë–ö–ê: API_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
    exit(1)

print("‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞–π—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
def get_thai_time():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ç–∞–π—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ"""
    thai_tz = pytz.timezone('Asia/Bangkok')
    utc_now = datetime.now(pytz.UTC)
    thai_now = utc_now.astimezone(thai_tz)
    return thai_now

def get_thai_date():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ —Ç–∞–π—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ"""
    return get_thai_time().date()

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Supabase
class SupabaseClient:
    def __init__(self, url, key):
        self.url = url
        self.key = key
        self.headers = {
            'apikey': key,
            'Authorization': f'Bearer {key}',
            'Content-Type': 'application/json'
        }
    
    def _make_request(self, method, endpoint, data=None):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å –∫ Supabase"""
        url = f"{self.url}/rest/v1/{endpoint}"
        
        try:
            if method == 'GET':
                response = requests.get(url, headers=self.headers, params=data)
            elif method == 'POST':
                response = requests.post(url, headers=self.headers, json=data)
            elif method == 'PATCH':
                response = requests.patch(url, headers=self.headers, json=data)
            elif method == 'DELETE':
                response = requests.delete(url, headers=self.headers)
            else:
                raise ValueError(f"Unsupported method: {method}")
            
            response.raise_for_status()
            return response.json() if response.content else None
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ Supabase –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return None
    
    def get_family_by_user(self, user_id):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–µ–º—å—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ family_members
        members = self._make_request('GET', 'family_members', {'user_id': f'eq.{user_id}'})
        if members and len(members) > 0:
            family_id = members[0]['family_id']
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–º—å–µ
            family = self._make_request('GET', 'families', {'id': f'eq.{family_id}'})
            return family[0] if family else None
        return None
    
    def create_family(self, name):
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ–º—å—é"""
        data = {'name': name}
        result = self._make_request('POST', 'families', data)
        return result[0] if result else None
    
    def add_family_member(self, family_id, user_id, role, name):
        """–î–æ–±–∞–≤–∏—Ç—å —á–ª–µ–Ω–∞ —Å–µ–º—å–∏"""
        data = {
            'family_id': family_id,
            'user_id': user_id,
            'role': role,
            'name': name
        }
        return self._make_request('POST', 'family_members', data)
    
    def add_feeding(self, family_id, author_id, author_role, author_name):
        """–î–æ–±–∞–≤–∏—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏–µ"""
        data = {
            'family_id': family_id,
            'author_id': author_id,
            'timestamp': get_thai_time().isoformat(),
            'author_role': author_role,
            'author_name': author_name
        }
        return self._make_request('POST', 'feedings', data)
    
    def add_diaper(self, family_id, author_id, author_role, author_name):
        """–î–æ–±–∞–≤–∏—Ç—å —Å–º–µ–Ω—É –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞"""
        data = {
            'family_id': family_id,
            'author_id': author_id,
            'timestamp': get_thai_time().isoformat(),
            'author_role': author_role,
            'author_name': author_name
        }
        return self._make_request('POST', 'diapers', data)
    
    def add_bath(self, family_id, author_id, author_role, author_name):
        """–î–æ–±–∞–≤–∏—Ç—å –∫—É–ø–∞–Ω–∏–µ"""
        data = {
            'family_id': family_id,
            'author_id': author_id,
            'timestamp': get_thai_time().isoformat(),
            'author_role': author_role,
            'author_name': author_name
        }
        return self._make_request('POST', 'baths', data)
    
    def add_activity(self, family_id, author_id, activity_type, author_role, author_name):
        """–î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"""
        data = {
            'family_id': family_id,
            'author_id': author_id,
            'timestamp': get_thai_time().isoformat(),
            'activity_type': activity_type,
            'author_role': author_role,
            'author_name': author_name
        }
        return self._make_request('POST', 'activities', data)
    
    def start_sleep(self, family_id, author_id, author_role, author_name):
        """–ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é —Å–Ω–∞"""
        # –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —Å–Ω–∞
        self._make_request('PATCH', 'sleep_sessions', 
                          {'is_active': False}, 
                          {'family_id': f'eq.{family_id}', 'is_active': 'eq.true'})
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
        data = {
            'family_id': family_id,
            'author_id': author_id,
            'start_time': get_thai_time().isoformat(),
            'is_active': True,
            'author_role': author_role,
            'author_name': author_name
        }
        return self._make_request('POST', 'sleep_sessions', data)
    
    def end_sleep(self, family_id, author_id, author_role, author_name):
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é —Å–Ω–∞"""
        data = {
            'end_time': get_thai_time().isoformat(),
            'is_active': False
        }
        return self._make_request('PATCH', 'sleep_sessions', data, 
                                 {'family_id': f'eq.{family_id}', 'is_active': f'eq.true'})
    
    def get_last_events(self, family_id):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è"""
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
        feedings = self._make_request('GET', 'feedings', 
                                    {'family_id': f'eq.{family_id}', 
                                     'order': 'timestamp.desc', 
                                     'limit': '1'})
        diapers = self._make_request('GET', 'diapers', 
                                   {'family_id': f'eq.{family_id}', 
                                    'order': 'timestamp.desc', 
                                    'limit': '1'})
        baths = self._make_request('GET', 'baths', 
                                 {'family_id': f'eq.{family_id}', 
                                  'order': 'timestamp.desc', 
                                  'limit': '1'})
        activities = self._make_request('GET', 'activities', 
                                      {'family_id': f'eq.{family_id}', 
                                       'order': 'timestamp.desc', 
                                       'limit': '1'})
        sleep = self._make_request('GET', 'sleep_sessions', 
                                 {'family_id': f'eq.{family_id}', 
                                  'is_active': 'eq.true', 
                                  'order': 'start_time.desc', 
                                  'limit': '1'})
        
        return {
            'feeding': feedings[0] if feedings else None,
            'diaper': diapers[0] if diapers else None,
            'bath': baths[0] if baths else None,
            'activity': activities[0] if activities else None,
            'sleep': sleep[0] if sleep else None
        }

# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase
supabase = SupabaseClient(SUPABASE_URL, SUPABASE_KEY)

client = TelegramClient('babybot', API_ID, API_HASH).start(bot_token=BOT_TOKEN)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_role(user_id, family_id):
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ–º—å–µ"""
    members = supabase._make_request('GET', 'family_members', 
                                   {'family_id': f'eq.{family_id}', 'user_id': f'eq.{user_id}'})
    if members and len(members) > 0:
        return members[0]['role']
    return '–†–æ–¥–∏—Ç–µ–ª—å'

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_name(user_id, family_id):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ–º—å–µ"""
    members = supabase._make_request('GET', 'family_members', 
                                   {'family_id': f'eq.{family_id}', 'user_id': f'eq.{user_id}'})
    if members and len(members) > 0:
        return members[0]['name']
    return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
def format_time_ago(timestamp):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–±—ã—Ç–∏—è"""
    if not timestamp:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    try:
        event_time = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
        current_time = get_thai_time()
        diff = current_time - event_time
        
        hours = int(diff.total_seconds() // 3600)
        minutes = int((diff.total_seconds() % 3600) // 60)
        
        if hours > 0:
            return f"{hours}—á {minutes}–º –Ω–∞–∑–∞–¥"
        else:
            return f"{minutes}–º –Ω–∞–∑–∞–¥"
    except:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@client.on(events.NewMessage(pattern='/start'))
async def start_handler(event):
    user_id = event.sender_id
    user_info = await client.get_entity(user_id)
    user_name = user_info.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–µ–º—å—è
    family = supabase.get_family_by_user(user_id)
    
    if family:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Å–µ–º—å–µ
        family_name = family['name']
        role = get_user_role(user_id, family['id'])
        name = get_user_name(user_id, family['id'])
        
        message = f"üëã –ü—Ä–∏–≤–µ—Ç, {name}!\n\n"
        message += f"üè† –í—ã –≤ —Å–µ–º—å–µ: {family_name}\n"
        message += f"üë§ –í–∞—à–∞ —Ä–æ–ª—å: {role}\n\n"
        message += "üì± –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        buttons = [
            [Button.inline("üçº –ö–æ—Ä–º–ª–µ–Ω–∏–µ", b"feeding")],
            [Button.inline("üë∂ –°–º–µ–Ω–∞ –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞", b"diaper")],
            [Button.inline("üõÅ –ö—É–ø–∞–Ω–∏–µ", b"bath")],
            [Button.inline("üéÆ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", b"activity")],
            [Button.inline("üò¥ –°–æ–Ω", b"sleep")],
            [Button.inline("üìä –î–∞—à–±–æ—Ä–¥", b"dashboard")],
            [Button.inline("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", b"info")]
        ]
        
        await event.respond(message, buttons=buttons)
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–µ–º—å–µ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è
        message = f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
        message += "üè† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BabyCareBot!\n\n"
        message += "üìù –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        buttons = [
            [Button.inline("üè† –°–æ–∑–¥–∞—Ç—å —Å–µ–º—å—é", b"create_family")],
            [Button.inline("üîó –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–µ–º—å–µ", b"join_family")],
            [Button.inline("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", b"info")]
        ]
        
        await event.respond(message, buttons=buttons)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–º—å–∏
@client.on(events.CallbackQuery(data=b'create_family'))
async def create_family_handler(event):
    user_id = event.sender_id
    user_states[user_id] = 'waiting_family_name'
    
    await event.edit("üè† –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–º—å–∏\n\nüìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–º—å–∏:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Å–µ–º—å–µ
@client.on(events.CallbackQuery(data=b'join_family'))
async def join_family_handler(event):
    user_id = event.sender_id
    user_states[user_id] = 'waiting_family_id'
    
    await event.edit("üîó –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Å–µ–º—å–µ\n\nüìù –í–≤–µ–¥–∏—Ç–µ ID —Å–µ–º—å–∏ (–ø–æ–ø—Ä–æ—Å–∏—Ç–µ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–µ–º—å–∏):")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@client.on(events.NewMessage)
async def text_handler(event):
    user_id = event.sender_id
    text = event.text
    
    if user_id in user_states:
        if user_states[user_id] == 'waiting_family_name':
            # –°–æ–∑–¥–∞–µ–º —Å–µ–º—å—é
            family = supabase.create_family(text)
            if family:
                family_id = family['id']
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                supabase.add_family_member(family_id, user_id, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", 
                                         event.sender.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
                
                message = f"‚úÖ –°–µ–º—å—è '{text}' —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
                message += f"üÜî ID —Å–µ–º—å–∏: {family_id}\n"
                message += f"üë§ –í–∞—à–∞ —Ä–æ–ª—å: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n\n"
                message += "üì± –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞!"
                
                buttons = [
                    [Button.inline("üçº –ö–æ—Ä–º–ª–µ–Ω–∏–µ", b"feeding")],
                    [Button.inline("üë∂ –°–º–µ–Ω–∞ –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞", b"diaper")],
                    [Button.inline("üõÅ –ö—É–ø–∞–Ω–∏–µ", b"bath")],
                    [Button.inline("üéÆ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", b"activity")],
                    [Button.inline("üò¥ –°–æ–Ω", b"sleep")],
                    [Button.inline("üìä –î–∞—à–±–æ—Ä–¥", b"dashboard")]
                ]
                
                await event.respond(message, buttons=buttons)
            else:
                await event.respond("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–º—å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            
            del user_states[user_id]
            
        elif user_states[user_id] == 'waiting_family_id':
            # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ —Å–µ–º—å–µ
            try:
                family_id = int(text)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–µ–º—å–∏
                family = supabase._make_request('GET', 'families', {'id': f'eq.{family_id}'})
                if family and len(family) > 0:
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ–º—å—é
                    result = supabase.add_family_member(family_id, user_id, "–†–æ–¥–∏—Ç–µ–ª—å", 
                                                      event.sender.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
                    if result:
                        message = f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Å–µ–º—å–µ!\n\n"
                        message += f"üè† –°–µ–º—å—è: {family[0]['name']}\n"
                        message += f"üë§ –í–∞—à–∞ —Ä–æ–ª—å: –†–æ–¥–∏—Ç–µ–ª—å\n\n"
                        message += "üì± –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞!"
                        
                        buttons = [
                            [Button.inline("üçº –ö–æ—Ä–º–ª–µ–Ω–∏–µ", b"feeding")],
                            [Button.inline("üë∂ –°–º–µ–Ω–∞ –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞", b"diaper")],
                            [Button.inline("üõÅ –ö—É–ø–∞–Ω–∏–µ", b"bath")],
                            [Button.inline("üéÆ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", b"activity")],
                            [Button.inline("üò¥ –°–æ–Ω", b"sleep")],
                            [Button.inline("üìä –î–∞—à–±–æ—Ä–¥", b"dashboard")]
                        ]
                        
                        await event.respond(message, buttons=buttons)
                    else:
                        await event.respond("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Å–µ–º—å–µ. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã —É–∂–µ –≤ —ç—Ç–æ–π —Å–µ–º—å–µ.")
                else:
                    await event.respond("‚ùå –°–µ–º—å—è —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            except ValueError:
                await event.respond("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
            
            del user_states[user_id]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
@client.on(events.CallbackQuery(data=b'feeding'))
async def feeding_handler(event):
    user_id = event.sender_id
    family = supabase.get_family_by_user(user_id)
    
    if not family:
        await event.answer("‚ùå –í—ã –Ω–µ –≤ —Å–µ–º—å–µ!")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–º–ª–µ–Ω–∏–µ
    result = supabase.add_feeding(family['id'], user_id, 
                                 get_user_role(user_id, family['id']),
                                 get_user_name(user_id, family['id']))
    
    if result:
        current_time = get_thai_time().strftime("%H:%M")
        await event.answer(f"‚úÖ –ö–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ {current_time}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
        events = supabase.get_last_events(family['id'])
        message = "üçº –ö–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ!\n\n"
        message += "üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:\n"
        
        if events['feeding']:
            message += f"üçº –ö–æ—Ä–º–ª–µ–Ω–∏–µ: {format_time_ago(events['feeding']['timestamp'])}\n"
        if events['diaper']:
            message += f"üë∂ –ü–æ–¥–≥—É–∑–Ω–∏–∫: {format_time_ago(events['diaper']['timestamp'])}\n"
        if events['bath']:
            message += f"üõÅ –ö—É–ø–∞–Ω–∏–µ: {format_time_ago(events['bath']['timestamp'])}\n"
        if events['activity']:
            message += f"üéÆ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {format_time_ago(events['activity']['timestamp'])}\n"
        if events['sleep']:
            message += f"üò¥ –°–æ–Ω: {format_time_ago(events['sleep']['start_time'])}\n"
        
        buttons = [
            [Button.inline("üçº –ö–æ—Ä–º–ª–µ–Ω–∏–µ", b"feeding")],
            [Button.inline("üë∂ –°–º–µ–Ω–∞ –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞", b"diaper")],
            [Button.inline("üõÅ –ö—É–ø–∞–Ω–∏–µ", b"bath")],
            [Button.inline("üéÆ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", b"activity")],
            [Button.inline("üò¥ –°–æ–Ω", b"sleep")],
            [Button.inline("üìä –î–∞—à–±–æ—Ä–¥", b"dashboard")],
            [Button.inline("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", b"info")]
        ]
        
        await event.edit(message, buttons=buttons)
    else:
        await event.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∫–æ—Ä–º–ª–µ–Ω–∏—è!")

@client.on(events.CallbackQuery(data=b'diaper'))
async def diaper_handler(event):
    user_id = event.sender_id
    family = supabase.get_family_by_user(user_id)
    
    if not family:
        await event.answer("‚ùå –í—ã –Ω–µ –≤ —Å–µ–º—å–µ!")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–º–µ–Ω—É –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞
    result = supabase.add_diaper(family['id'], user_id, 
                                get_user_role(user_id, family['id']),
                                get_user_name(user_id, family['id']))
    
    if result:
        current_time = get_thai_time().strftime("%H:%M")
        await event.answer(f"‚úÖ –°–º–µ–Ω–∞ –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ {current_time}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
        events = supabase.get_last_events(family['id'])
        message = "üë∂ –°–º–µ–Ω–∞ –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞!\n\n"
        message += "üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:\n"
        
        if events['feeding']:
            message += f"üçº –ö–æ—Ä–º–ª–µ–Ω–∏–µ: {format_time_ago(events['feeding']['timestamp'])}\n"
        if events['diaper']:
            message += f"üë∂ –ü–æ–¥–≥—É–∑–Ω–∏–∫: {format_time_ago(events['diaper']['timestamp'])}\n"
        if events['bath']:
            message += f"üõÅ –ö—É–ø–∞–Ω–∏–µ: {format_time_ago(events['bath']['timestamp'])}\n"
        if events['activity']:
            message += f"üéÆ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {format_time_ago(events['activity']['timestamp'])}\n"
        if events['sleep']:
            message += f"üò¥ –°–æ–Ω: {format_time_ago(events['sleep']['start_time'])}\n"
        
        buttons = [
            [Button.inline("üçº –ö–æ—Ä–º–ª–µ–Ω–∏–µ", b"feeding")],
            [Button.inline("üë∂ –°–º–µ–Ω–∞ –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞", b"diaper")],
            [Button.inline("üõÅ –ö—É–ø–∞–Ω–∏–µ", b"bath")],
            [Button.inline("üéÆ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", b"activity")],
            [Button.inline("üò¥ –°–æ–Ω", b"sleep")],
            [Button.inline("üìä –î–∞—à–±–æ—Ä–¥", b"dashboard")],
            [Button.inline("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", b"info")]
        ]
        
        await event.edit(message, buttons=buttons)
    else:
        await event.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å–º–µ–Ω—ã –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞!")

@client.on(events.CallbackQuery(data=b'bath'))
async def bath_handler(event):
    user_id = event.sender_id
    family = supabase.get_family_by_user(user_id)
    
    if not family:
        await event.answer("‚ùå –í—ã –Ω–µ –≤ —Å–µ–º—å–µ!")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫—É–ø–∞–Ω–∏–µ
    result = supabase.add_bath(family['id'], user_id, 
                              get_user_role(user_id, family['id']),
                              get_user_name(user_id, family['id']))
    
    if result:
        current_time = get_thai_time().strftime("%H:%M")
        await event.answer(f"‚úÖ –ö—É–ø–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ {current_time}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
        events = supabase.get_last_events(family['id'])
        message = "üõÅ –ö—É–ø–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ!\n\n"
        message += "üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:\n"
        
        if events['feeding']:
            message += f"üçº –ö–æ—Ä–º–ª–µ–Ω–∏–µ: {format_time_ago(events['feeding']['timestamp'])}\n"
        if events['diaper']:
            message += f"üë∂ –ü–æ–¥–≥—É–∑–Ω–∏–∫: {format_time_ago(events['diaper']['timestamp'])}\n"
        if events['bath']:
            message += f"üõÅ –ö—É–ø–∞–Ω–∏–µ: {format_time_ago(events['bath']['timestamp'])}\n"
        if events['activity']:
            message += f"üéÆ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {format_time_ago(events['activity']['timestamp'])}\n"
        if events['sleep']:
            message += f"üò¥ –°–æ–Ω: {format_time_ago(events['sleep']['start_time'])}\n"
        
        buttons = [
            [Button.inline("üçº –ö–æ—Ä–º–ª–µ–Ω–∏–µ", b"feeding")],
            [Button.inline("üë∂ –°–º–µ–Ω–∞ –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞", b"diaper")],
            [Button.inline("üõÅ –ö—É–ø–∞–Ω–∏–µ", b"bath")],
            [Button.inline("üéÆ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", b"activity")],
            [Button.inline("üò¥ –°–æ–Ω", b"sleep")],
            [Button.inline("üìä –î–∞—à–±–æ—Ä–¥", b"dashboard")],
            [Button.inline("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", b"info")]
        ]
        
        await event.edit(message, buttons=buttons)
    else:
        await event.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∫—É–ø–∞–Ω–∏—è!")

@client.on(events.CallbackQuery(data=b'activity'))
async def activity_handler(event):
    user_id = event.sender_id
    family = supabase.get_family_by_user(user_id)
    
    if not family:
        await event.answer("‚ùå –í—ã –Ω–µ –≤ —Å–µ–º—å–µ!")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    result = supabase.add_activity(family['id'], user_id, "tummy_time",
                                  get_user_role(user_id, family['id']),
                                  get_user_name(user_id, family['id']))
    
    if result:
        current_time = get_thai_time().strftime("%H:%M")
        await event.answer(f"‚úÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ {current_time}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
        events = supabase.get_last_events(family['id'])
        message = "üéÆ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∞–Ω–∞!\n\n"
        message += "üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:\n"
        
        if events['feeding']:
            message += f"üçº –ö–æ—Ä–º–ª–µ–Ω–∏–µ: {format_time_ago(events['feeding']['timestamp'])}\n"
        if events['diaper']:
            message += f"üë∂ –ü–æ–¥–≥—É–∑–Ω–∏–∫: {format_time_ago(events['diaper']['timestamp'])}\n"
        if events['bath']:
            message += f"üõÅ –ö—É–ø–∞–Ω–∏–µ: {format_time_ago(events['bath']['timestamp'])}\n"
        if events['activity']:
            message += f"üéÆ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {format_time_ago(events['activity']['timestamp'])}\n"
        if events['sleep']:
            message += f"üò¥ –°–æ–Ω: {format_time_ago(events['sleep']['start_time'])}\n"
        
        buttons = [
            [Button.inline("üçº –ö–æ—Ä–º–ª–µ–Ω–∏–µ", b"feeding")],
            [Button.inline("üë∂ –°–º–µ–Ω–∞ –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞", b"diaper")],
            [Button.inline("üõÅ –ö—É–ø–∞–Ω–∏–µ", b"bath")],
            [Button.inline("üéÆ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", b"activity")],
            [Button.inline("üò¥ –°–æ–Ω", b"sleep")],
            [Button.inline("üìä –î–∞—à–±–æ—Ä–¥", b"dashboard")],
            [Button.inline("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", b"info")]
        ]
        
        await event.edit(message, buttons=buttons)
    else:
        await event.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!")

@client.on(events.CallbackQuery(data=b'sleep'))
async def sleep_handler(event):
    user_id = event.sender_id
    family = supabase.get_family_by_user(user_id)
    
    if not family:
        await event.answer("‚ùå –í—ã –Ω–µ –≤ —Å–µ–º—å–µ!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è —Å–Ω–∞
    events = supabase.get_last_events(family['id'])
    
    if events['sleep']:
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–Ω
        result = supabase.end_sleep(family['id'], user_id,
                                   get_user_role(user_id, family['id']),
                                   get_user_name(user_id, family['id']))
        
        if result:
            current_time = get_thai_time().strftime("%H:%M")
            await event.answer(f"‚úÖ –°–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω –≤ {current_time}")
            message = "üò¥ –°–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
        else:
            await event.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–Ω–∞!")
            return
    else:
        # –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–Ω
        result = supabase.start_sleep(family['id'], user_id,
                                     get_user_role(user_id, family['id']),
                                     get_user_name(user_id, family['id']))
        
        if result:
            current_time = get_thai_time().strftime("%H:%M")
            await event.answer(f"‚úÖ –°–æ–Ω –Ω–∞—á–∞—Ç –≤ {current_time}")
            message = "üò¥ –°–æ–Ω –Ω–∞—á–∞—Ç!\n\n"
        else:
            await event.answer("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Å–Ω–∞!")
            return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
    events = supabase.get_last_events(family['id'])
    message += "üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:\n"
    
    if events['feeding']:
        message += f"üçº –ö–æ—Ä–º–ª–µ–Ω–∏–µ: {format_time_ago(events['feeding']['timestamp'])}\n"
    if events['diaper']:
        message += f"üë∂ –ü–æ–¥–≥—É–∑–Ω–∏–∫: {format_time_ago(events['diaper']['timestamp'])}\n"
    if events['bath']:
        message += f"üõÅ –ö—É–ø–∞–Ω–∏–µ: {format_time_ago(events['bath']['timestamp'])}\n"
    if events['activity']:
        message += f"üéÆ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {format_time_ago(events['activity']['timestamp'])}\n"
    if events['sleep']:
        message += f"üò¥ –°–æ–Ω: {format_time_ago(events['sleep']['start_time'])}\n"
    
    buttons = [
        [Button.inline("üçº –ö–æ—Ä–º–ª–µ–Ω–∏–µ", b"feeding")],
        [Button.inline("üë∂ –°–º–µ–Ω–∞ –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞", b"diaper")],
        [Button.inline("üõÅ –ö—É–ø–∞–Ω–∏–µ", b"bath")],
        [Button.inline("üéÆ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", b"activity")],
        [Button.inline("üò¥ –°–æ–Ω", b"sleep")],
        [Button.inline("üìä –î–∞—à–±–æ—Ä–¥", b"dashboard")],
        [Button.inline("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", b"info")]
    ]
    
    await event.edit(message, buttons=buttons)

@client.on(events.CallbackQuery(data=b'dashboard'))
async def dashboard_handler(event):
    user_id = event.sender_id
    family = supabase.get_family_by_user(user_id)
    
    if not family:
        await event.answer("‚ùå –í—ã –Ω–µ –≤ —Å–µ–º—å–µ!")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º URL –¥–∞—à–±–æ—Ä–¥–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    dashboard_url = os.getenv('DASHBOARD_URL', 'https://your-dashboard.vercel.app')
    
    message = f"üìä –î–∞—à–±–æ—Ä–¥ —Å–µ–º—å–∏ '{family['name']}'\n\n"
    message += f"üîó –û—Ç–∫—Ä–æ–π—Ç–µ –¥–∞—à–±–æ—Ä–¥: {dashboard_url}\n\n"
    message += "üì± –í –¥–∞—à–±–æ—Ä–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ:\n"
    message += "‚Ä¢ üìà –í–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n"
    message += "‚Ä¢ üìä –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏\n"
    message += "‚Ä¢ üë• –£–ø—Ä–∞–≤–ª—è—Ç—å —á–ª–µ–Ω–∞–º–∏ —Å–µ–º—å–∏\n"
    message += "‚Ä¢ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
    
    buttons = [
        [Button.url("üìä –û—Ç–∫—Ä—ã—Ç—å –¥–∞—à–±–æ—Ä–¥", dashboard_url)],
        [Button.inline("üçº –ö–æ—Ä–º–ª–µ–Ω–∏–µ", b"feeding")],
        [Button.inline("üë∂ –°–º–µ–Ω–∞ –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞", b"diaper")],
        [Button.inline("üõÅ –ö—É–ø–∞–Ω–∏–µ", b"bath")],
        [Button.inline("üéÆ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", b"activity")],
        [Button.inline("üò¥ –°–æ–Ω", b"sleep")],
        [Button.inline("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", b"info")]
    ]
    
    await event.edit(message, buttons=buttons)

@client.on(events.CallbackQuery(data=b'info'))
async def info_handler(event):
    message = "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ BabyCareBot\n\n"
    message += "ü§ñ BabyCareBot - —ç—Ç–æ –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É—Ö–æ–¥–∞ –∑–∞ –º–∞–ª—ã—à–æ–º\n\n"
    message += "üì± –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
    message += "‚Ä¢ üçº –ó–∞–ø–∏—Å—å –∫–æ—Ä–º–ª–µ–Ω–∏–π\n"
    message += "‚Ä¢ üë∂ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–º–µ–Ω –ø–æ–¥–≥—É–∑–Ω–∏–∫–æ–≤\n"
    message += "‚Ä¢ üõÅ –§–∏–∫—Å–∞—Ü–∏—è –∫—É–ø–∞–Ω–∏–π\n"
    message += "‚Ä¢ üéÆ –ó–∞–ø–∏—Å—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π\n"
    message += "‚Ä¢ üò¥ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–Ω–∞\n"
    message += "‚Ä¢ üìä –ö—Ä–∞—Å–∏–≤—ã–π –¥–∞—à–±–æ—Ä–¥\n\n"
    message += "üë• –°–µ–º–µ–π–Ω–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è:\n"
    message += "‚Ä¢ –ù–µ—Å–∫–æ–ª—å–∫–æ —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏\n"
    message += "‚Ä¢ –†–∞–∑–Ω—ã–µ —Ä–æ–ª–∏ (–ú–∞–º–∞, –ü–∞–ø–∞, –ë–∞–±—É—à–∫–∞ –∏ —Ç.–¥.)\n"
    message += "‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö\n\n"
    message += "üîó –°–æ–∑–¥–∞–Ω–æ —Å ‚ù§Ô∏è –¥–ª—è –∑–∞–±–æ—Ç–ª–∏–≤—ã—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–π"
    
    buttons = [
        [Button.inline("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", b"main_menu")]
    ]
    
    await event.edit(message, buttons=buttons)

@client.on(events.CallbackQuery(data=b'main_menu'))
async def main_menu_handler(event):
    user_id = event.sender_id
    family = supabase.get_family_by_user(user_id)
    
    if family:
        family_name = family['name']
        role = get_user_role(user_id, family['id'])
        name = get_user_name(user_id, family['id'])
        
        message = f"üëã –ü—Ä–∏–≤–µ—Ç, {name}!\n\n"
        message += f"üè† –í—ã –≤ —Å–µ–º—å–µ: {family_name}\n"
        message += f"üë§ –í–∞—à–∞ —Ä–æ–ª—å: {role}\n\n"
        message += "üì± –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        buttons = [
            [Button.inline("üçº –ö–æ—Ä–º–ª–µ–Ω–∏–µ", b"feeding")],
            [Button.inline("üë∂ –°–º–µ–Ω–∞ –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞", b"diaper")],
            [Button.inline("üõÅ –ö—É–ø–∞–Ω–∏–µ", b"bath")],
            [Button.inline("üéÆ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", b"activity")],
            [Button.inline("üò¥ –°–æ–Ω", b"sleep")],
            [Button.inline("üìä –î–∞—à–±–æ—Ä–¥", b"dashboard")],
            [Button.inline("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", b"info")]
        ]
    else:
        user_info = await client.get_entity(user_id)
        user_name = user_info.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        message = f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
        message += "üè† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BabyCareBot!\n\n"
        message += "üìù –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        buttons = [
            [Button.inline("üè† –°–æ–∑–¥–∞—Ç—å —Å–µ–º—å—é", b"create_family")],
            [Button.inline("üîó –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–µ–º—å–µ", b"join_family")],
            [Button.inline("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", b"info")]
        ]
    
    await event.edit(message, buttons=buttons)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ keep-alive (–¥–ª—è Vercel)
def external_keep_alive():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ keep-alive —á–µ—Ä–µ–∑ Vercel"""
    try:
        import urllib.request
        import urllib.error
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–Ω–µ—à–Ω–∏–π URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        external_url = os.getenv('VERCEL_EXTERNAL_URL')
        if external_url:
            # –£–±–∏—Ä–∞–µ–º trailing slash –µ—Å–ª–∏ –µ—Å—Ç—å
            if external_url.endswith('/'):
                external_url = external_url[:-1]
            
            # –ü–∏–Ω–≥—É–µ–º –≤–Ω–µ—à–Ω–∏–π URL
            try:
                response = urllib.request.urlopen(f'{external_url}/api/health', timeout=10)
                if response.getcode() == 200:
                    print(f"‚úÖ External keep-alive successful: {time.strftime('%H:%M:%S')}")
                else:
                    print(f"‚ö†Ô∏è External keep-alive returned status: {response.getcode()}")
            except urllib.error.URLError as e:
                print(f"‚ö†Ô∏è External keep-alive failed: {e}")
        else:
            print("‚ö†Ô∏è VERCEL_EXTERNAL_URL not set, skipping external keep-alive")
    except Exception as e:
        print(f"‚ùå External keep-alive critical error: {e}")

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è keep-alive
scheduler = AsyncIOScheduler()

# –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É keep-alive –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
scheduler.add_job(external_keep_alive, 'interval', minutes=10)

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler.start()

print("üöÄ BabyCareBot –∑–∞–ø—É—â–µ–Ω —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Supabase!")
print("üìä API –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ Vercel")
print("üîó –î–∞—à–±–æ—Ä–¥: –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ DASHBOARD_URL –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
client.run_until_disconnected()
