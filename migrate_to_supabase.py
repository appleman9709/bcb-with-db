#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite –≤ Supabase
"""
import sqlite3
import requests
import json
import os
from datetime import datetime
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Supabase
SUPABASE_URL = os.getenv('SUPABASE_URL')
SUPABASE_KEY = os.getenv('SUPABASE_KEY')

if not SUPABASE_URL or not SUPABASE_KEY:
    print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ SUPABASE_URL –∏ SUPABASE_KEY")
    exit(1)

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase
headers = {
    'apikey': SUPABASE_KEY,
    'Authorization': f'Bearer {SUPABASE_KEY}',
    'Content-Type': 'application/json'
}

def make_supabase_request(method, endpoint, data=None):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å –∫ Supabase"""
    url = f"{SUPABASE_URL}/rest/v1/{endpoint}"
    
    try:
        if method == 'GET':
            response = requests.get(url, headers=headers, params=data)
        elif method == 'POST':
            response = requests.post(url, headers=headers, json=data)
        elif method == 'PATCH':
            response = requests.patch(url, headers=headers, json=data)
        elif method == 'DELETE':
            response = requests.delete(url, headers=headers)
        else:
            raise ValueError(f"Unsupported method: {method}")
        
        response.raise_for_status()
        return response.json() if response.content else None
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Supabase –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None

def migrate_families(sqlite_conn):
    """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç —Å–µ–º—å–∏"""
    print("üè† –ú–∏–≥—Ä–∞—Ü–∏—è —Å–µ–º–µ–π...")
    
    cursor = sqlite_conn.cursor()
    cursor.execute("SELECT id, name FROM families")
    families = cursor.fetchall()
    
    migrated_count = 0
    for family_id, name in families:
        data = {'name': name}
        result = make_supabase_request('POST', 'families', data)
        if result:
            print(f"   ‚úÖ –°–µ–º—å—è '{name}' (ID: {family_id}) -> Supabase ID: {result['id']}")
            migrated_count += 1
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–µ–º—å–∏ '{name}'")
    
    print(f"üìä –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–µ–º–µ–π: {migrated_count}/{len(families)}")
    return migrated_count

def migrate_family_members(sqlite_conn):
    """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏"""
    print("üë• –ú–∏–≥—Ä–∞—Ü–∏—è —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏...")
    
    cursor = sqlite_conn.cursor()
    cursor.execute("SELECT family_id, user_id, role, name FROM family_members")
    members = cursor.fetchall()
    
    migrated_count = 0
    for family_id, user_id, role, name in members:
        data = {
            'family_id': family_id,
            'user_id': user_id,
            'role': role,
            'name': name
        }
        result = make_supabase_request('POST', 'family_members', data)
        if result:
            print(f"   ‚úÖ –ß–ª–µ–Ω —Å–µ–º—å–∏ '{name}' (—Ä–æ–ª—å: {role})")
            migrated_count += 1
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —á–ª–µ–Ω–∞ —Å–µ–º—å–∏ '{name}'")
    
    print(f"üìä –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏: {migrated_count}/{len(members)}")
    return migrated_count

def migrate_feedings(sqlite_conn):
    """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç –∫–æ—Ä–º–ª–µ–Ω–∏—è"""
    print("üçº –ú–∏–≥—Ä–∞—Ü–∏—è –∫–æ—Ä–º–ª–µ–Ω–∏–π...")
    
    cursor = sqlite_conn.cursor()
    cursor.execute("SELECT family_id, author_id, timestamp, author_role, author_name FROM feedings")
    feedings = cursor.fetchall()
    
    migrated_count = 0
    for family_id, author_id, timestamp, author_role, author_name in feedings:
        data = {
            'family_id': family_id,
            'author_id': author_id,
            'timestamp': timestamp,
            'author_role': author_role,
            'author_name': author_name
        }
        result = make_supabase_request('POST', 'feedings', data)
        if result:
            migrated_count += 1
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∫–æ—Ä–º–ª–µ–Ω–∏—è –æ—Ç {author_name}")
    
    print(f"üìä –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –∫–æ—Ä–º–ª–µ–Ω–∏–π: {migrated_count}/{len(feedings)}")
    return migrated_count

def migrate_diapers(sqlite_conn):
    """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç —Å–º–µ–Ω—ã –ø–æ–¥–≥—É–∑–Ω–∏–∫–æ–≤"""
    print("üë∂ –ú–∏–≥—Ä–∞—Ü–∏—è —Å–º–µ–Ω –ø–æ–¥–≥—É–∑–Ω–∏–∫–æ–≤...")
    
    cursor = sqlite_conn.cursor()
    cursor.execute("SELECT family_id, author_id, timestamp, author_role, author_name FROM diapers")
    diapers = cursor.fetchall()
    
    migrated_count = 0
    for family_id, author_id, timestamp, author_role, author_name in diapers:
        data = {
            'family_id': family_id,
            'author_id': author_id,
            'timestamp': timestamp,
            'author_role': author_role,
            'author_name': author_name
        }
        result = make_supabase_request('POST', 'diapers', data)
        if result:
            migrated_count += 1
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–º–µ–Ω—ã –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞ –æ—Ç {author_name}")
    
    print(f"üìä –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–º–µ–Ω –ø–æ–¥–≥—É–∑–Ω–∏–∫–æ–≤: {migrated_count}/{len(diapers)}")
    return migrated_count

def migrate_baths(sqlite_conn):
    """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç –∫—É–ø–∞–Ω–∏—è"""
    print("üõÅ –ú–∏–≥—Ä–∞—Ü–∏—è –∫—É–ø–∞–Ω–∏–π...")
    
    cursor = sqlite_conn.cursor()
    cursor.execute("SELECT family_id, author_id, timestamp, author_role, author_name FROM baths")
    baths = cursor.fetchall()
    
    migrated_count = 0
    for family_id, author_id, timestamp, author_role, author_name in baths:
        data = {
            'family_id': family_id,
            'author_id': author_id,
            'timestamp': timestamp,
            'author_role': author_role,
            'author_name': author_name
        }
        result = make_supabase_request('POST', 'baths', data)
        if result:
            migrated_count += 1
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∫—É–ø–∞–Ω–∏—è –æ—Ç {author_name}")
    
    print(f"üìä –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –∫—É–ø–∞–Ω–∏–π: {migrated_count}/{len(baths)}")
    return migrated_count

def migrate_activities(sqlite_conn):
    """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    print("üéÆ –ú–∏–≥—Ä–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π...")
    
    cursor = sqlite_conn.cursor()
    cursor.execute("SELECT family_id, author_id, timestamp, activity_type, author_role, author_name FROM activities")
    activities = cursor.fetchall()
    
    migrated_count = 0
    for family_id, author_id, timestamp, activity_type, author_role, author_name in activities:
        data = {
            'family_id': family_id,
            'author_id': author_id,
            'timestamp': timestamp,
            'activity_type': activity_type,
            'author_role': author_role,
            'author_name': author_name
        }
        result = make_supabase_request('POST', 'activities', data)
        if result:
            migrated_count += 1
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ—Ç {author_name}")
    
    print(f"üìä –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π: {migrated_count}/{len(activities)}")
    return migrated_count

def migrate_sleep_sessions(sqlite_conn):
    """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç —Å–µ—Å—Å–∏–∏ —Å–Ω–∞"""
    print("üò¥ –ú–∏–≥—Ä–∞—Ü–∏—è —Å–µ—Å—Å–∏–π —Å–Ω–∞...")
    
    cursor = sqlite_conn.cursor()
    cursor.execute("SELECT family_id, author_id, start_time, end_time, is_active, author_role, author_name FROM sleep_sessions")
    sessions = cursor.fetchall()
    
    migrated_count = 0
    for family_id, author_id, start_time, end_time, is_active, author_role, author_name in sessions:
        data = {
            'family_id': family_id,
            'author_id': author_id,
            'start_time': start_time,
            'end_time': end_time,
            'is_active': bool(is_active),
            'author_role': author_role,
            'author_name': author_name
        }
        result = make_supabase_request('POST', 'sleep_sessions', data)
        if result:
            migrated_count += 1
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏ —Å–Ω–∞ –æ—Ç {author_name}")
    
    print(f"üìä –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–µ—Å—Å–∏–π —Å–Ω–∞: {migrated_count}/{len(sessions)}")
    return migrated_count

def migrate_settings(sqlite_conn):
    """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    print("‚öôÔ∏è –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
    
    cursor = sqlite_conn.cursor()
    cursor.execute("""
        SELECT family_id, feed_interval, diaper_interval, tips_enabled, 
               tips_time_hour, tips_time_minute, bath_reminder_enabled,
               bath_reminder_hour, bath_reminder_minute, bath_reminder_period,
               activity_reminder_enabled, activity_reminder_interval,
               sleep_monitoring_enabled, baby_age_months, birth_date
        FROM settings
    """)
    settings = cursor.fetchall()
    
    migrated_count = 0
    for (family_id, feed_interval, diaper_interval, tips_enabled, 
         tips_time_hour, tips_time_minute, bath_reminder_enabled,
         bath_reminder_hour, bath_reminder_minute, bath_reminder_period,
         activity_reminder_enabled, activity_reminder_interval,
         sleep_monitoring_enabled, baby_age_months, birth_date) in settings:
        
        data = {
            'family_id': family_id,
            'feed_interval': feed_interval,
            'diaper_interval': diaper_interval,
            'tips_enabled': bool(tips_enabled),
            'tips_time_hour': tips_time_hour,
            'tips_time_minute': tips_time_minute,
            'bath_reminder_enabled': bool(bath_reminder_enabled),
            'bath_reminder_hour': bath_reminder_hour,
            'bath_reminder_minute': bath_reminder_minute,
            'bath_reminder_period': bath_reminder_period,
            'activity_reminder_enabled': bool(activity_reminder_enabled),
            'activity_reminder_interval': activity_reminder_interval,
            'sleep_monitoring_enabled': bool(sleep_monitoring_enabled),
            'baby_age_months': baby_age_months,
            'baby_birth_date': birth_date
        }
        result = make_supabase_request('POST', 'settings', data)
        if result:
            migrated_count += 1
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è —Å–µ–º—å–∏ {family_id}")
    
    print(f"üìä –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {migrated_count}/{len(settings)}")
    return migrated_count

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite –≤ Supabase")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_files = ['babybot.db', 'babybot_render.db']
    db_file = None
    
    for file in db_files:
        if os.path.exists(file):
            db_file = file
            break
    
    if not db_file:
        print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite!")
        print("üìù –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª babybot.db –∏–ª–∏ babybot_render.db —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return
    
    print(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {db_file}")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ SQLite
    try:
        sqlite_conn = sqlite3.connect(db_file)
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SQLite: {e}")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase...")
    health_check = make_supabase_request('GET', 'families', {'limit': '1'})
    if health_check is None:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase!")
        return
    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å–ø–µ—à–Ω–æ")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    total_migrated = 0
    
    try:
        total_migrated += migrate_families(sqlite_conn)
        total_migrated += migrate_family_members(sqlite_conn)
        total_migrated += migrate_feedings(sqlite_conn)
        total_migrated += migrate_diapers(sqlite_conn)
        total_migrated += migrate_baths(sqlite_conn)
        total_migrated += migrate_activities(sqlite_conn)
        total_migrated += migrate_sleep_sessions(sqlite_conn)
        total_migrated += migrate_settings(sqlite_conn)
        
        print("=" * 50)
        print(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: {total_migrated}")
        print("üéâ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ Supabase!")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
    finally:
        sqlite_conn.close()

if __name__ == "__main__":
    main()
