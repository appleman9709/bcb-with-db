// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const API_BASE_URL = window.APP_CONFIG.API_BASE_URL;
let currentFamilyId = null;
let historyChart = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    initializeApp();
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function initializeApp() {
    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram Web App
        if (window.Telegram && window.Telegram.WebApp) {
            window.Telegram.WebApp.ready();
            window.Telegram.WebApp.expand();
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–º—É
            if (window.Telegram.WebApp.colorScheme === 'dark') {
                document.body.classList.add('dark-theme');
            }
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ–º–µ–π
        await loadFamilies();
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–µ–º—å–∏, –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—É—é
        const familySelect = document.getElementById('familySelect');
        if (familySelect.value) {
            await loadDashboard(familySelect.value);
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        showError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–µ–º–µ–π
async function loadFamilies() {
    try {
        const response = await fetch(`${API_BASE_URL}/families`);
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        const familySelect = document.getElementById('familySelect');
        
        // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–ø—Ü–∏–∏
        familySelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–º—å—é...</option>';
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–º—å–∏
        data.families.forEach(family => {
            const option = document.createElement('option');
            option.value = family.id;
            option.textContent = family.name;
            familySelect.appendChild(option);
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        familySelect.addEventListener('change', async function() {
            if (this.value) {
                await loadDashboard(this.value);
            }
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ–º–µ–π:', error);
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ–º–µ–π');
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞
async function loadDashboard(familyId) {
    try {
        showLoading();
        currentFamilyId = familyId;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞
        const dashboardResponse = await fetch(`${API_BASE_URL}/family/${familyId}/dashboard`);
        if (!dashboardResponse.ok) {
            throw new Error(`HTTP error! status: ${dashboardResponse.status}`);
        }
        
        const dashboardData = await dashboardResponse.json();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        const historyResponse = await fetch(`${API_BASE_URL}/family/${familyId}/history?days=7`);
        if (!historyResponse.ok) {
            throw new Error(`HTTP error! status: ${historyResponse.status}`);
        }
        
        const historyData = await historyResponse.json();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏
        const membersResponse = await fetch(`${API_BASE_URL}/family/${familyId}/members`);
        if (!membersResponse.ok) {
            throw new Error(`HTTP error! status: ${membersResponse.status}`);
        }
        
        const membersData = await membersResponse.json();
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        displayDashboard(dashboardData);
        displayHistory(historyData);
        displayMembers(membersData);
        
        hideLoading();
        showDashboard();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞:', error);
        hideLoading();
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞');
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞
function displayDashboard(data) {
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ–º—å–µ
    document.getElementById('familyName').textContent = data.family.name;
    
    const babyAge = data.settings.baby_age_months;
    document.getElementById('babyAge').textContent = `–í–æ–∑—Ä–∞—Å—Ç: ${babyAge} –º–µ—Å.`;
    
    if (data.settings.baby_birth_date) {
        const birthDate = new Date(data.settings.baby_birth_date);
        document.getElementById('babyBirthDate').textContent = 
            `–†–æ–¥–∏–ª—Å—è: ${birthDate.toLocaleDateString('ru-RU')}`;
    } else {
        document.getElementById('babyBirthDate').textContent = '';
    }
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    document.getElementById('todayFeedings').textContent = data.today_stats.feedings;
    document.getElementById('todayDiapers').textContent = data.today_stats.diapers;
    document.getElementById('todayBaths').textContent = data.today_stats.baths;
    document.getElementById('todayActivities').textContent = data.today_stats.activities;
    
    // –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
    displayLastEvent('feeding', data.last_events.feeding, data.settings.feed_interval);
    displayLastEvent('diaper', data.last_events.diaper, data.settings.diaper_interval);
    displayLastEvent('bath', data.last_events.bath, null);
    displayLastEvent('activity', data.last_events.activity, null);
    
    // –°–æ–Ω
    displaySleep(data.sleep);
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
function displayLastEvent(type, event, interval) {
    const timeElement = document.getElementById(`last${type.charAt(0).toUpperCase() + type.slice(1)}Time`);
    const authorElement = document.getElementById(`last${type.charAt(0).toUpperCase() + type.slice(1)}Author`);
    const statusElement = document.getElementById(`${type}Status`);
    
    if (event.timestamp) {
        const eventTime = new Date(event.timestamp);
        timeElement.textContent = formatTime(eventTime);
        
        if (event.author_role && event.author_name) {
            authorElement.textContent = `${event.author_role} ${event.author_name}`;
        } else {
            authorElement.textContent = '';
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –∫–æ—Ä–º–ª–µ–Ω–∏—è –∏ –ø–æ–¥–≥—É–∑–Ω–∏–∫–æ–≤
        if (interval && event.time_ago) {
            const hoursAgo = event.time_ago.hours + event.time_ago.minutes / 60;
            
            if (hoursAgo < interval) {
                statusElement.textContent = '‚úÖ –•–æ—Ä–æ—à–æ';
                statusElement.className = 'event-status good';
            } else if (hoursAgo < interval + 0.5) {
                statusElement.textContent = '‚ö†Ô∏è –ü–æ—Ä–∞';
                statusElement.className = 'event-status warning';
            } else {
                statusElement.textContent = 'üö® –î–æ–ª–≥–æ';
                statusElement.className = 'event-status danger';
            }
        } else {
            statusElement.textContent = '';
            statusElement.className = 'event-status';
        }
    } else {
        timeElement.textContent = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
        authorElement.textContent = '';
        statusElement.textContent = '';
        statusElement.className = 'event-status';
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–Ω–∞
function displaySleep(sleepData) {
    const statusElement = document.getElementById('sleepStatus');
    const durationElement = document.getElementById('sleepDuration');
    const authorElement = document.getElementById('sleepAuthor');
    
    if (sleepData.is_active) {
        statusElement.textContent = '–ú–∞–ª—ã—à —Å–ø–∏—Ç';
        
        if (sleepData.duration) {
            const { hours, minutes } = sleepData.duration;
            durationElement.textContent = `–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${hours}—á ${minutes}–º`;
        } else {
            durationElement.textContent = '';
        }
        
        if (sleepData.author_role && sleepData.author_name) {
            authorElement.textContent = `–£–ª–æ–∂–∏–ª: ${sleepData.author_role} ${sleepData.author_name}`;
        } else {
            authorElement.textContent = '';
        }
    } else {
        statusElement.textContent = '–ú–∞–ª—ã—à –Ω–µ —Å–ø–∏—Ç';
        durationElement.textContent = '';
        authorElement.textContent = '';
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
function displayHistory(data) {
    if (historyChart) {
        historyChart.destroy();
    }
    
    const ctx = document.getElementById('historyChart').getContext('2d');
    
    const labels = data.history.map(item => {
        const date = new Date(item.date);
        return date.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit' });
    });
    
    const feedingsData = data.history.map(item => item.feedings);
    const diapersData = data.history.map(item => item.diapers);
    const bathsData = data.history.map(item => item.baths);
    const activitiesData = data.history.map(item => item.activities);
    
    historyChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: labels,
            datasets: [
                {
                    label: '–ö–æ—Ä–º–ª–µ–Ω–∏—è',
                    data: feedingsData,
                    borderColor: '#667eea',
                    backgroundColor: 'rgba(102, 126, 234, 0.1)',
                    tension: 0.4,
                    fill: true
                },
                {
                    label: '–ü–æ–¥–≥—É–∑–Ω–∏–∫–∏',
                    data: diapersData,
                    borderColor: '#764ba2',
                    backgroundColor: 'rgba(118, 75, 162, 0.1)',
                    tension: 0.4,
                    fill: true
                },
                {
                    label: '–ö—É–ø–∞–Ω–∏—è',
                    data: bathsData,
                    borderColor: '#f093fb',
                    backgroundColor: 'rgba(240, 147, 251, 0.1)',
                    tension: 0.4,
                    fill: true
                },
                {
                    label: '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
                    data: activitiesData,
                    borderColor: '#4facfe',
                    backgroundColor: 'rgba(79, 172, 254, 0.1)',
                    tension: 0.4,
                    fill: true
                }
            ]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    position: 'top',
                    labels: {
                        usePointStyle: true,
                        padding: 20,
                        font: {
                            size: 12
                        }
                    }
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        stepSize: 1
                    }
                }
            },
            elements: {
                point: {
                    radius: 4,
                    hoverRadius: 6
                }
            }
        }
    });
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏
function displayMembers(data) {
    const membersList = document.getElementById('membersList');
    membersList.innerHTML = '';
    
    data.members.forEach(member => {
        const memberCard = document.createElement('div');
        memberCard.className = 'member-card';
        
        memberCard.innerHTML = `
            <div class="member-role">${member.role}</div>
            <div class="member-name">${member.name}</div>
        `;
        
        membersList.appendChild(memberCard);
    });
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
function formatTime(date) {
    const now = new Date();
    const diff = now - date;
    const minutes = Math.floor(diff / 60000);
    const hours = Math.floor(minutes / 60);
    const days = Math.floor(hours / 24);
    
    if (days > 0) {
        return `${days} –¥. –Ω–∞–∑–∞–¥`;
    } else if (hours > 0) {
        return `${hours} —á. –Ω–∞–∑–∞–¥`;
    } else if (minutes > 0) {
        return `${minutes} –º–∏–Ω. –Ω–∞–∑–∞–¥`;
    } else {
        return '–¢–æ–ª—å–∫–æ —á—Ç–æ';
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
function showLoading() {
    document.getElementById('loading').classList.remove('hidden');
    document.getElementById('dashboard').classList.add('hidden');
    document.getElementById('error').classList.add('hidden');
}

// –°–∫—Ä—ã—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
function hideLoading() {
    document.getElementById('loading').classList.add('hidden');
}

// –ü–æ–∫–∞–∑–∞—Ç—å –¥–∞—à–±–æ—Ä–¥
function showDashboard() {
    document.getElementById('dashboard').classList.remove('hidden');
}

// –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
function showError(message) {
    document.getElementById('errorMessage').textContent = message;
    document.getElementById('error').classList.remove('hidden');
    document.getElementById('dashboard').classList.add('hidden');
}

// –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
setInterval(() => {
    if (currentFamilyId) {
        loadDashboard(currentFamilyId);
    }
}, 30000);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–µ—Ç–∏
window.addEventListener('online', () => {
    if (currentFamilyId) {
        loadDashboard(currentFamilyId);
    }
});

window.addEventListener('offline', () => {
    showError('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É');
});
