// BabyCareBot Dashboard - –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
class BabyCareBot {
    constructor() {
        this.currentUser = null;
        this.currentFamily = null;
        this.chart = null;
        this.init();
    }

    async init() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BabyCareBot Dashboard');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const savedUser = localStorage.getItem('babycarebot_user');
        if (savedUser) {
            this.currentUser = JSON.parse(savedUser);
            await this.loadFamilyData();
            this.showDashboard();
        } else {
            this.showLogin();
        }

        this.setupEventListeners();
        this.setupAutoRefresh();
    }

    setupEventListeners() {
        // Login
        document.getElementById('login-btn').addEventListener('click', () => this.handleLogin());
        
        // Logout
        document.getElementById('logout-btn').addEventListener('click', () => this.handleLogout());
        
        // Quick actions
        document.querySelectorAll('.action-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const action = e.currentTarget.dataset.action;
                this.showEventModal(action);
            });
        });
        
        // Sleep button
        document.getElementById('sleep-btn').addEventListener('click', () => this.toggleSleep());
        
        // Modal
        document.getElementById('close-modal').addEventListener('click', () => this.hideEventModal());
        document.getElementById('cancel-event').addEventListener('click', () => this.hideEventModal());
        document.getElementById('save-event').addEventListener('click', () => this.saveEvent());
        
        // Set current time for event modal
        document.getElementById('event-time').value = this.getCurrentDateTime();
    }

    setupAutoRefresh() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        setInterval(() => {
            if (this.currentFamily) {
                this.loadDashboardData();
            }
        }, 30000);
    }

    async handleLogin() {
        const familyName = document.getElementById('family-name').value.trim();
        const userName = document.getElementById('user-name-input').value.trim();
        const userRole = document.getElementById('user-role').value;

        if (!familyName || !userName) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
            return;
        }

        try {
            // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º —Å–µ–º—å—é
            let family = await this.findOrCreateFamily(familyName);
            
            // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            let user = await this.findOrCreateUser(family.id, userName, userRole);
            
            this.currentUser = user;
            this.currentFamily = family;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
            localStorage.setItem('babycarebot_user', JSON.stringify(user));
            localStorage.setItem('babycarebot_family', JSON.stringify(family));
            
            await this.loadFamilyData();
            this.showDashboard();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
            alert('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
    }

    async findOrCreateFamily(name) {
        try {
            // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ–º—å—é
            const response = await fetch(`${window.APP_CONFIG.API_BASE_URL}/families`);
            
            if (!response.ok) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ–º–µ–π:', response.status, response.statusText);
                throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ–º–µ–π');
            }
            
            const data = await response.json();
            console.log('–ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å–µ–º—å–∏:', data);
            
            const existingFamily = data.families?.find(f => f.name === name);
            if (existingFamily) {
                console.log('–ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å–µ–º—å—è:', existingFamily);
                return existingFamily;
            }
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ–º—å—é
            console.log('–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ–º—å—é:', name);
            const createResponse = await fetch(`${window.APP_CONFIG.API_BASE_URL}/families`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ name })
            });
            
            if (!createResponse.ok) {
                const errorText = await createResponse.text();
                console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–º—å–∏:', createResponse.status, errorText);
                throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–º—å–∏: ${createResponse.status}`);
            }
            
            const newFamily = await createResponse.json();
            console.log('–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ–º—å—è:', newFamily);
            return newFamily;
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤ findOrCreateFamily:', error);
            throw error;
        }
    }

    async findOrCreateUser(familyId, name, role) {
        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è)
        const userId = Date.now(); // –ü—Ä–æ—Å—Ç–æ–π ID –¥–ª—è –¥–µ–º–æ
        
        const response = await fetch(`${window.APP_CONFIG.API_BASE_URL}/family/${familyId}/members`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                user_id: userId,
                name: name,
                role: role
            })
        });
        
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        }
        
        return {
            id: userId,
            name: name,
            role: role,
            family_id: familyId
        };
    }

    async loadFamilyData() {
        if (!this.currentFamily) return;
        
        try {
            await Promise.all([
                this.loadDashboardData(),
                this.loadFamilyMembers(),
                this.loadHistoryChart()
            ]);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–µ–º—å–∏:', error);
        }
    }

    async loadDashboardData() {
        try {
            const response = await fetch(`${window.APP_CONFIG.API_BASE_URL}/family/${this.currentFamily.id}/dashboard`);
            const data = await response.json();
            
            this.updateStats(data.today_stats);
            this.updateLastEvents(data.last_events);
            this.updateSleepStatus(data.sleep);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞:', error);
        }
    }

    async loadFamilyMembers() {
        try {
            const response = await fetch(`${window.APP_CONFIG.API_BASE_URL}/family/${this.currentFamily.id}/members`);
            const data = await response.json();
            
            this.updateFamilyMembers(data.members);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏:', error);
        }
    }

    async loadHistoryChart() {
        try {
            const response = await fetch(`${window.APP_CONFIG.API_BASE_URL}/family/${this.currentFamily.id}/history?days=7`);
            const data = await response.json();
            
            this.updateHistoryChart(data.history);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error);
        }
    }

    updateStats(stats) {
        document.getElementById('feedings-count').textContent = stats.feedings;
        document.getElementById('diapers-count').textContent = stats.diapers;
        document.getElementById('baths-count').textContent = stats.baths;
        document.getElementById('activities-count').textContent = stats.activities;
    }

    updateLastEvents(events) {
        const eventsList = document.getElementById('events-list');
        const eventsArray = [];
        
        if (events.feeding.timestamp) {
            eventsArray.push({
                type: 'feeding',
                icon: 'üçº',
                label: '–ö–æ—Ä–º–ª–µ–Ω–∏–µ',
                time: this.formatTimeAgo(events.feeding.timestamp),
                author: events.feeding.author_name
            });
        }
        
        if (events.diaper.timestamp) {
            eventsArray.push({
                type: 'diaper',
                icon: 'üë∂',
                label: '–ü–æ–¥–≥—É–∑–Ω–∏–∫',
                time: this.formatTimeAgo(events.diaper.timestamp),
                author: events.diaper.author_name
            });
        }
        
        if (events.bath.timestamp) {
            eventsArray.push({
                type: 'bath',
                icon: 'üõÅ',
                label: '–ö—É–ø–∞–Ω–∏–µ',
                time: this.formatTimeAgo(events.bath.timestamp),
                author: events.bath.author_name
            });
        }
        
        if (events.activity.timestamp) {
            eventsArray.push({
                type: 'activity',
                icon: 'üéÆ',
                label: '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
                time: this.formatTimeAgo(events.activity.timestamp),
                author: events.activity.author_name
            });
        }
        
        if (eventsArray.length === 0) {
            eventsList.innerHTML = '<div class="no-events">–°–æ–±—ã—Ç–∏–π –ø–æ–∫–∞ –Ω–µ—Ç</div>';
            return;
        }
        
        eventsList.innerHTML = eventsArray.map(event => `
            <div class="event-item">
                <div class="event-icon">${event.icon}</div>
                <div class="event-details">
                    <div class="event-label">${event.label}</div>
                    <div class="event-meta">${event.time} ‚Ä¢ ${event.author}</div>
                </div>
            </div>
        `).join('');
    }

    updateSleepStatus(sleep) {
        const sleepCard = document.getElementById('sleep-card');
        const sleepStatus = document.getElementById('sleep-status');
        const sleepDuration = document.getElementById('sleep-duration');
        const sleepBtn = document.getElementById('sleep-btn');
        
        if (sleep.is_active) {
            sleepStatus.textContent = '–°–ø–∏—Ç';
            sleepDuration.textContent = this.formatDuration(sleep.duration);
            sleepBtn.textContent = '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–Ω';
            sleepBtn.classList.add('active');
        } else {
            sleepStatus.textContent = '–ù–µ —Å–ø–∏—Ç';
            sleepDuration.textContent = '';
            sleepBtn.textContent = '–ù–∞—á–∞—Ç—å —Å–æ–Ω';
            sleepBtn.classList.remove('active');
        }
    }

    updateFamilyMembers(members) {
        const membersList = document.getElementById('members-list');
        
        if (members.length === 0) {
            membersList.innerHTML = '<div class="no-members">–ß–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏ –ø–æ–∫–∞ –Ω–µ—Ç</div>';
            return;
        }
        
        membersList.innerHTML = members.map(member => `
            <div class="member-item">
                <div class="member-avatar">${member.name.charAt(0)}</div>
                <div class="member-details">
                    <div class="member-name">${member.name}</div>
                    <div class="member-role">${member.role}</div>
                </div>
            </div>
        `).join('');
    }

    updateHistoryChart(history) {
        const ctx = document.getElementById('history-chart').getContext('2d');
        
        if (this.chart) {
            this.chart.destroy();
        }
        
        const labels = history.map(day => {
            const date = new Date(day.date);
            return date.toLocaleDateString('ru', { weekday: 'short', day: 'numeric' });
        }).reverse();
        
        this.chart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [
                    {
                        label: '–ö–æ—Ä–º–ª–µ–Ω–∏—è',
                        data: history.map(day => day.feedings).reverse(),
                        borderColor: '#FF6B6B',
                        backgroundColor: 'rgba(255, 107, 107, 0.1)',
                        tension: 0.4
                    },
                    {
                        label: '–ü–æ–¥–≥—É–∑–Ω–∏–∫–∏',
                        data: history.map(day => day.diapers).reverse(),
                        borderColor: '#4ECDC4',
                        backgroundColor: 'rgba(78, 205, 196, 0.1)',
                        tension: 0.4
                    },
                    {
                        label: '–ö—É–ø–∞–Ω–∏—è',
                        data: history.map(day => day.baths).reverse(),
                        borderColor: '#45B7D1',
                        backgroundColor: 'rgba(69, 183, 209, 0.1)',
                        tension: 0.4
                    },
                    {
                        label: '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
                        data: history.map(day => day.activities).reverse(),
                        borderColor: '#96CEB4',
                        backgroundColor: 'rgba(150, 206, 180, 0.1)',
                        tension: 0.4
                    }
                ]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'top',
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            stepSize: 1
                        }
                    }
                }
            }
        });
    }

    showEventModal(action) {
        const modal = document.getElementById('event-modal');
        const title = document.getElementById('modal-title');
        const author = document.getElementById('event-author');
        const activityGroup = document.getElementById('activity-type-group');
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        const titles = {
            feeding: '–î–æ–±–∞–≤–∏—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏–µ',
            diaper: '–°–º–µ–Ω–∞ –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞',
            bath: '–î–æ–±–∞–≤–∏—Ç—å –∫—É–ø–∞–Ω–∏–µ',
            activity: '–î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
            sleep: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–Ω–æ–º'
        };
        
        title.textContent = titles[action] || '–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ';
        author.value = this.currentUser.name;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –ø–æ–ª–µ —Ç–∏–ø–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if (action === 'activity') {
            activityGroup.style.display = 'block';
        } else {
            activityGroup.style.display = 'none';
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        document.getElementById('event-time').value = this.getCurrentDateTime();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
        modal.dataset.action = action;
        
        modal.classList.remove('hidden');
    }

    hideEventModal() {
        document.getElementById('event-modal').classList.add('hidden');
    }

    async saveEvent() {
        const modal = document.getElementById('event-modal');
        const action = modal.dataset.action;
        const time = document.getElementById('event-time').value;
        const activityType = document.getElementById('activity-type').value;
        
        if (!time) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è');
            return;
        }
        
        try {
            const eventData = {
                family_id: this.currentFamily.id,
                author_id: this.currentUser.id,
                author_name: this.currentUser.name,
                author_role: this.currentUser.role,
                timestamp: new Date(time).toISOString()
            };
            
            let endpoint = '';
            if (action === 'activity') {
                eventData.activity_type = activityType;
                endpoint = 'activities';
            } else {
                endpoint = action + 's';
            }
            
            const response = await fetch(`${window.APP_CONFIG.API_BASE_URL}/family/${this.currentFamily.id}/${endpoint}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(eventData)
            });
            
            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è');
            }
            
            this.hideEventModal();
            await this.loadDashboardData();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            this.showNotification('–°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!');
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error);
            alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
    }

    async toggleSleep() {
        try {
            const sleepCard = document.getElementById('sleep-card');
            const isActive = sleepCard.querySelector('.sleep-btn').classList.contains('active');
            
            if (isActive) {
                // –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–Ω
                await fetch(`${window.APP_CONFIG.API_BASE_URL}/family/${this.currentFamily.id}/sleep/end`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        family_id: this.currentFamily.id,
                        author_id: this.currentUser.id,
                        author_name: this.currentUser.name,
                        author_role: this.currentUser.role
                    })
                });
            } else {
                // –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–Ω
                await fetch(`${window.APP_CONFIG.API_BASE_URL}/family/${this.currentFamily.id}/sleep/start`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        family_id: this.currentFamily.id,
                        author_id: this.currentUser.id,
                        author_name: this.currentUser.name,
                        author_role: this.currentUser.role
                    })
                });
            }
            
            await this.loadDashboardData();
            this.showNotification(isActive ? '–°–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω!' : '–°–æ–Ω –Ω–∞—á–∞—Ç!');
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–Ω–æ–º:', error);
            alert('–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–Ω–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
    }

    handleLogout() {
        localStorage.removeItem('babycarebot_user');
        localStorage.removeItem('babycarebot_family');
        this.currentUser = null;
        this.currentFamily = null;
        this.showLogin();
    }

    showLogin() {
        document.getElementById('login-screen').classList.remove('hidden');
        document.getElementById('dashboard-screen').classList.add('hidden');
    }

    showDashboard() {
        document.getElementById('login-screen').classList.add('hidden');
        document.getElementById('dashboard-screen').classList.remove('hidden');
        document.getElementById('user-name').textContent = this.currentUser.name;
    }

    showNotification(message) {
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const notification = document.createElement('div');
        notification.className = 'notification';
        notification.textContent = message;
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.remove();
        }, 3000);
    }

    formatTimeAgo(timestamp) {
        const now = new Date();
        const time = new Date(timestamp);
        const diffMs = now - time;
        const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
        const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));
        
        if (diffHours > 0) {
            return `${diffHours}—á ${diffMinutes}–º –Ω–∞–∑–∞–¥`;
        } else {
            return `${diffMinutes}–º –Ω–∞–∑–∞–¥`;
        }
    }

    formatDuration(duration) {
        if (!duration) return '';
        return `${duration.hours}—á ${duration.minutes}–º`;
    }

    getCurrentDateTime() {
        const now = new Date();
        const year = now.getFullYear();
        const month = String(now.getMonth() + 1).padStart(2, '0');
        const day = String(now.getDate()).padStart(2, '0');
        const hours = String(now.getHours()).padStart(2, '0');
        const minutes = String(now.getMinutes()).padStart(2, '0');
        
        return `${year}-${month}-${day}T${hours}:${minutes}`;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    new BabyCareBot();
});
