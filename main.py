from telethon import TelegramClient, events, Button
from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import asyncio
import sqlite3
import random
import threading
import time
import http.server
import socketserver
import pytz

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_ID = os.getenv('API_ID')
API_HASH = os.getenv('API_HASH')
BOT_TOKEN = os.getenv('BOT_TOKEN')

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not all([API_ID, API_HASH, BOT_TOKEN]):
    print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
    print("üìù –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ .env —Ñ–∞–π–ª–µ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:")
    print("   ‚Ä¢ API_ID")
    print("   ‚Ä¢ API_HASH") 
    print("   ‚Ä¢ BOT_TOKEN")
    print("üîß –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ env.example")
    exit(1)

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º API_ID –≤ —á–∏—Å–ª–æ
try:
    API_ID = int(API_ID)
except ValueError:
    print("‚ùå –û–®–ò–ë–ö–ê: API_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
    exit(1)

print("‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞–π—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
def get_thai_time():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ç–∞–π—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ"""
    thai_tz = pytz.timezone('Asia/Bangkok')
    utc_now = datetime.now(pytz.UTC)
    thai_now = utc_now.astimezone(thai_tz)
    return thai_now

def get_thai_date():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ —Ç–∞–π—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ"""
    return get_thai_time().date()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ keep-alive (–¥–ª—è Render)
def external_keep_alive():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ keep-alive —á–µ—Ä–µ–∑ Render"""
    try:
        import urllib.request
        import urllib.error
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–Ω–µ—à–Ω–∏–π URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        external_url = os.getenv('RENDER_EXTERNAL_URL')
        if external_url:
            # –£–±–∏—Ä–∞–µ–º trailing slash –µ—Å–ª–∏ –µ—Å—Ç—å
            if external_url.endswith('/'):
                external_url = external_url[:-1]
            
            # –ü–∏–Ω–≥—É–µ–º –≤–Ω–µ—à–Ω–∏–π URL
            try:
                response = urllib.request.urlopen(f'{external_url}/ping', timeout=10)
                if response.getcode() == 200:
                    print(f"‚úÖ External keep-alive successful: {time.strftime('%H:%M:%S')}")
                else:
                    print(f"‚ö†Ô∏è External keep-alive returned status: {response.getcode()}")
            except urllib.error.URLError as e:
                print(f"‚ö†Ô∏è External keep-alive failed: {e}")
            except Exception as e:
                print(f"‚ö†Ô∏è External keep-alive error: {e}")
        else:
            print("‚ÑπÔ∏è RENDER_EXTERNAL_URL not set, skipping external keep-alive")
            
    except Exception as e:
        print(f"‚ùå External keep-alive critical error: {e}")

client = TelegramClient('babybot', API_ID, API_HASH).start(bot_token=BOT_TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect("babybot.db")
    cur = conn.cursor()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç)
    cur.execute("""
        CREATE TABLE IF NOT EXISTS families (
            id INTEGER PRIMARY KEY,
            name TEXT NOT NULL
        )
    """)
    
    cur.execute("""
        CREATE TABLE IF NOT EXISTS family_members (
            family_id INTEGER,
            user_id INTEGER,
            role TEXT DEFAULT '–†–æ–¥–∏—Ç–µ–ª—å',
            name TEXT DEFAULT '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            FOREIGN KEY (family_id) REFERENCES families (id)
        )
    """)
    
    cur.execute("""
        CREATE TABLE IF NOT EXISTS feedings (
            id INTEGER PRIMARY KEY,
            family_id INTEGER,
            author_id INTEGER,
            timestamp TEXT NOT NULL,
            author_role TEXT DEFAULT '–†–æ–¥–∏—Ç–µ–ª—å',
            author_name TEXT DEFAULT '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            FOREIGN KEY (family_id) REFERENCES families (id)
        )
    """)
    
    cur.execute("""
        CREATE TABLE IF NOT EXISTS diapers (
            id INTEGER PRIMARY KEY,
            family_id INTEGER,
            author_id INTEGER,
            timestamp TEXT NOT NULL,
            author_role TEXT DEFAULT '–†–æ–¥–∏—Ç–µ–ª—å',
            author_name TEXT DEFAULT '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            FOREIGN KEY (family_id) REFERENCES families (id)
        )
    """)
    
    # –ù–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –∫—É–ø–∞–Ω–∏—è
    cur.execute("""
        CREATE TABLE IF NOT EXISTS baths (
            id INTEGER PRIMARY KEY,
            family_id INTEGER,
            author_id INTEGER,
            timestamp TEXT NOT NULL,
            author_role TEXT DEFAULT '–†–æ–¥–∏—Ç–µ–ª—å',
            author_name TEXT DEFAULT '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            FOREIGN KEY (family_id) REFERENCES families (id)
        )
    """)
    
    # –ù–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –∏–≥—Ä –∏ –≤—ã–∫–ª–∞–¥—ã–≤–∞–Ω–∏—è –Ω–∞ –∂–∏–≤–æ—Ç
    cur.execute("""
        CREATE TABLE IF NOT EXISTS activities (
            id INTEGER PRIMARY KEY,
            family_id INTEGER,
            author_id INTEGER,
            timestamp TEXT NOT NULL,
            activity_type TEXT DEFAULT 'tummy_time',
            author_role TEXT DEFAULT '–†–æ–¥–∏—Ç–µ–ª—å',
            author_name TEXT DEFAULT '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            FOREIGN KEY (family_id) REFERENCES families (id)
        )
    """)
    
    # –ù–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å–Ω–∞
    cur.execute("""
        CREATE TABLE IF NOT EXISTS sleep_sessions (
            id INTEGER PRIMARY KEY,
            family_id INTEGER,
            author_id INTEGER,
            start_time TEXT NOT NULL,
            end_time TEXT,
            is_active INTEGER DEFAULT 1,
            author_role TEXT DEFAULT '–†–æ–¥–∏—Ç–µ–ª—å',
            author_name TEXT DEFAULT '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            FOREIGN KEY (family_id) REFERENCES families (id)
        )
    """)
    
    cur.execute("""
        CREATE TABLE IF NOT EXISTS settings (
            family_id INTEGER,
            feed_interval INTEGER DEFAULT 3,
            diaper_interval INTEGER DEFAULT 2,
            tips_enabled INTEGER DEFAULT 1,
            tips_time_hour INTEGER DEFAULT 9,
            tips_time_minute INTEGER DEFAULT 0,
            bath_reminder_enabled INTEGER DEFAULT 1,
            bath_reminder_hour INTEGER DEFAULT 19,
            bath_reminder_minute INTEGER DEFAULT 0,
            bath_reminder_period INTEGER DEFAULT 1,
            activity_reminder_enabled INTEGER DEFAULT 1,
            activity_reminder_interval INTEGER DEFAULT 2,
            sleep_monitoring_enabled INTEGER DEFAULT 1,
            baby_age_months INTEGER DEFAULT 0,
            baby_birth_date TEXT,
            FOREIGN KEY (family_id) REFERENCES families (id)
        )
    """)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü–µ settings, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    try:
        cur.execute("ALTER TABLE settings ADD COLUMN tips_time_hour INTEGER DEFAULT 9")
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ tips_time_hour")
    except sqlite3.OperationalError:
        print("‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ tips_time_hour —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    try:
        cur.execute("ALTER TABLE settings ADD COLUMN tips_time_minute INTEGER DEFAULT 0")
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ tips_time_minute")
    except sqlite3.OperationalError:
        print("‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ tips_time_minute —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫—É–ø–∞–Ω–∏—è
    try:
        cur.execute("ALTER TABLE settings ADD COLUMN bath_reminder_enabled INTEGER DEFAULT 1")
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ bath_reminder_enabled")
    except sqlite3.OperationalError:
        print("‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ bath_reminder_enabled —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    try:
        cur.execute("ALTER TABLE settings ADD COLUMN bath_reminder_hour INTEGER DEFAULT 19")
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ bath_reminder_hour")
    except sqlite3.OperationalError:
        print("‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ bath_reminder_hour —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    try:
        cur.execute("ALTER TABLE settings ADD COLUMN bath_reminder_minute INTEGER DEFAULT 0")
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ bath_reminder_minute")
    except sqlite3.OperationalError:
        print("‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ bath_reminder_minute —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    try:
        cur.execute("ALTER TABLE settings ADD COLUMN bath_reminder_period INTEGER DEFAULT 1")
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ bath_reminder_period")
    except sqlite3.OperationalError:
        print("‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ bath_reminder_period —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∏–≥—Ä
    try:
        cur.execute("ALTER TABLE settings ADD COLUMN activity_reminder_enabled INTEGER DEFAULT 1")
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ activity_reminder_enabled")
    except sqlite3.OperationalError:
        print("‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ activity_reminder_enabled —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    try:
        cur.execute("ALTER TABLE settings ADD COLUMN activity_reminder_interval INTEGER DEFAULT 2")
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ activity_reminder_interval")
    except sqlite3.OperationalError:
        print("‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ activity_reminder_interval —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Å–Ω–∞
    try:
        cur.execute("ALTER TABLE settings ADD COLUMN sleep_monitoring_enabled INTEGER DEFAULT 1")
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ sleep_monitoring_enabled")
    except sqlite3.OperationalError:
        print("‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ sleep_monitoring_enabled —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    try:
        cur.execute("ALTER TABLE settings ADD COLUMN baby_age_months INTEGER DEFAULT 0")
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ baby_age_months")
    except sqlite3.OperationalError:
        print("‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ baby_age_months —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    try:
        cur.execute("ALTER TABLE settings ADD COLUMN baby_birth_date TEXT")
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ baby_birth_date")
    except sqlite3.OperationalError:
        print("‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ baby_birth_date —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    cur.execute("UPDATE settings SET tips_time_hour = 9 WHERE tips_time_hour IS NULL")
    cur.execute("UPDATE settings SET tips_time_minute = 0 WHERE tips_time_minute IS NULL")
    cur.execute("UPDATE settings SET bath_reminder_enabled = 1 WHERE bath_reminder_enabled IS NULL")
    cur.execute("UPDATE settings SET bath_reminder_hour = 19 WHERE bath_reminder_hour IS NULL")
    cur.execute("UPDATE settings SET bath_reminder_minute = 0 WHERE bath_reminder_minute IS NULL")
    cur.execute("UPDATE settings SET bath_reminder_period = 1 WHERE bath_reminder_period IS NULL")
    cur.execute("UPDATE settings SET activity_reminder_enabled = 1 WHERE activity_reminder_enabled IS NULL")
    cur.execute("UPDATE settings SET activity_reminder_interval = 2 WHERE activity_reminder_enabled IS NULL")
    cur.execute("UPDATE settings SET sleep_monitoring_enabled = 1 WHERE sleep_monitoring_enabled IS NULL")
    cur.execute("UPDATE settings SET baby_age_months = 0 WHERE baby_age_months IS NULL")
    
    # –ú–∏–≥—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü feedings –∏ diapers
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ family_id –≤ —Ç–∞–±–ª–∏—Ü–µ feedings
        cur.execute("PRAGMA table_info(feedings)")
        columns = [col[1] for col in cur.fetchall()]
        
        if 'family_id' not in columns:
            print("üîÑ –ú–∏–≥—Ä–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É feedings...")
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
            cur.execute("""
                CREATE TABLE feedings_new (
                    id INTEGER PRIMARY KEY,
                    family_id INTEGER,
                    author_id INTEGER,
                    timestamp TEXT NOT NULL,
                    author_role TEXT DEFAULT '–†–æ–¥–∏—Ç–µ–ª—å',
                    author_name TEXT DEFAULT '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                    FOREIGN KEY (family_id) REFERENCES families (id)
                )
            """)
            
            # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã
            cur.execute("SELECT id, user_id, timestamp FROM feedings")
            old_data = cur.fetchall()
            
            for row in old_data:
                # –î–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏ —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–µ–º—å—é
                temp_family_id = create_family(f"–ú–∏–≥—Ä–∞—Ü–∏—è {row[0]}", row[1])
                cur.execute("INSERT INTO feedings_new (family_id, author_id, timestamp, author_role, author_name) VALUES (?, ?, ?, ?, ?)",
                           (temp_family_id, row[1], row[2], '–†–æ–¥–∏—Ç–µ–ª—å', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤—É—é
            cur.execute("DROP TABLE feedings")
            cur.execute("ALTER TABLE feedings_new RENAME TO feedings")
            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ feedings –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞")
        else:
            print("‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü–∞ feedings —É–∂–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É")
            
    except sqlite3.OperationalError as e:
        print(f"‚ÑπÔ∏è –ú–∏–≥—Ä–∞—Ü–∏—è feedings: {e}")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ family_id –≤ —Ç–∞–±–ª–∏—Ü–µ diapers
        cur.execute("PRAGMA table_info(diapers)")
        columns = [col[1] for col in cur.fetchall()]
        
        if 'family_id' not in columns:
            print("üîÑ –ú–∏–≥—Ä–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É diapers...")
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
            cur.execute("""
                CREATE TABLE diapers_new (
                    id INTEGER PRIMARY KEY,
                    family_id INTEGER,
                    author_id INTEGER,
                    timestamp TEXT NOT NULL,
                    author_role TEXT DEFAULT '–†–æ–¥–∏—Ç–µ–ª—å',
                    author_name TEXT DEFAULT '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                    FOREIGN KEY (family_id) REFERENCES families (id)
                )
            """)
            
            # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã
            cur.execute("SELECT id, user_id, timestamp FROM diapers")
            old_data = cur.fetchall()
            
            for row in old_data:
                # –î–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏ —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–µ–º—å—é
                temp_family_id = create_family(f"–ú–∏–≥—Ä–∞—Ü–∏—è {row[0]}", row[1])
                cur.execute("INSERT INTO diapers_new (family_id, author_id, timestamp, author_role, author_name) VALUES (?, ?, ?, ?, ?)",
                           (temp_family_id, row[1], row[2], '–†–æ–¥–∏—Ç–µ–ª—å', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤—É—é
            cur.execute("DROP TABLE diapers")
            cur.execute("ALTER TABLE diapers_new RENAME TO diapers")
            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ diapers –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞")
        else:
            print("‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü–∞ diapers —É–∂–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É")
            
    except sqlite3.OperationalError as e:
        print(f"‚ÑπÔ∏è –ú–∏–≥—Ä–∞—Ü–∏—è diapers: {e}")
    
    conn.commit()
    conn.close()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∞")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def get_family_id(user_id):
    conn = sqlite3.connect("babybot.db")
    cur = conn.cursor()
    cur.execute("SELECT family_id FROM family_members WHERE user_id = ?", (user_id,))
    result = cur.fetchone()
    conn.close()
    family_id = result[0] if result else None
    print(f"DEBUG: get_family_id({user_id}) = {family_id}")
    return family_id

def create_family(name, user_id):
    conn = sqlite3.connect("babybot.db")
    cur = conn.cursor()
    
    cur.execute("INSERT INTO families (name) VALUES (?)", (name,))
    family_id = cur.lastrowid
    
    cur.execute("INSERT INTO family_members (family_id, user_id) VALUES (?, ?)", (family_id, user_id))
    cur.execute("INSERT INTO settings (family_id) VALUES (?)", (family_id,))
    
    conn.commit()
    conn.close()
    return family_id

def join_family_by_code(code, user_id):
    """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–µ–º—å–µ –ø–æ –∫–æ–¥—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
    try:
        family_id = int(code)
        conn = sqlite3.connect("babybot.db")
        cur = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–µ–º—å—è
        cur.execute("SELECT id, name FROM families WHERE id = ?", (family_id,))
        family = cur.fetchone()
        
        if not family:
            conn.close()
            return None, "–°–µ–º—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Å–µ–º—å–µ
        cur.execute("SELECT family_id FROM family_members WHERE user_id = ?", (user_id,))
        existing = cur.fetchone()
        
        if existing:
            conn.close()
            return None, "–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–µ–º—å–µ"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ–º—å—é
        cur.execute("INSERT INTO family_members (family_id, user_id) VALUES (?, ?)", (family_id, user_id))
        conn.commit()
        conn.close()
        
        return family_id, family[1]  # family_id, family_name
    except ValueError:
        return None, "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"
    except Exception as e:
        return None, f"–û—à–∏–±–∫–∞: {str(e)}"

def invite_code_for(family_id):
    # –í —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –±–∞–∑–µ –Ω–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ invite_code, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º ID —Å–µ–º—å–∏
    return str(family_id)

def get_family_name(family_id):
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–º—å–∏ –ø–æ ID"""
    conn = sqlite3.connect("babybot.db")
    cur = conn.cursor()
    cur.execute("SELECT name FROM families WHERE id = ?", (family_id,))
    result = cur.fetchone()
    conn.close()
    return result[0] if result else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–µ–º—å—è"

def get_member_info(user_id):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–ª–µ–Ω–µ —Å–µ–º—å–∏"""
    conn = sqlite3.connect("babybot.db")
    cur = conn.cursor()
    cur.execute("SELECT role, name FROM family_members WHERE user_id = ?", (user_id,))
    result = cur.fetchone()
    conn.close()
    if result:
        return result[0], result[1]  # role, name
    return "–†–æ–¥–∏—Ç–µ–ª—å", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

def set_member_role(user_id, role, name):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å –∏ –∏–º—è –¥–ª—è —á–ª–µ–Ω–∞ —Å–µ–º—å–∏"""
    conn = sqlite3.connect("babybot.db")
    cur = conn.cursor()
    cur.execute("UPDATE family_members SET role = ?, name = ? WHERE user_id = ?", (role, name, user_id))
    conn.commit()
    conn.close()

def get_family_members_with_roles(family_id):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏ —Å —Ä–æ–ª—è–º–∏"""
    conn = sqlite3.connect("babybot.db")
    cur = conn.cursor()
    cur.execute("SELECT user_id, role, name FROM family_members WHERE family_id = ?", (family_id,))
    members = cur.fetchall()
    conn.close()
    return members

def add_feeding(user_id, minutes_ago=0):
    conn = sqlite3.connect("babybot.db")
    cur = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º family_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    family_id = get_family_id(user_id)
    if not family_id:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–µ–º—å–µ, —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–µ–º—å—é
        family_id = create_family("–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–µ–º—å—è", user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ
    role, name = get_member_info(user_id)
    
    timestamp = get_thai_time() - timedelta(minutes=minutes_ago)
    cur.execute("INSERT INTO feedings (family_id, author_id, timestamp, author_role, author_name) VALUES (?, ?, ?, ?, ?)", 
                (family_id, user_id, timestamp.isoformat(), role, name))
    conn.commit()
    conn.close()

def add_diaper_change(user_id, minutes_ago=0):
    conn = sqlite3.connect("babybot.db")
    cur = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º family_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    family_id = get_family_id(user_id)
    if not family_id:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–µ–º—å–µ, —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–µ–º—å—é
        family_id = create_family("–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–µ–º—å—è", user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ
    role, name = get_member_info(user_id)
    
    timestamp = get_thai_time() - timedelta(minutes=minutes_ago)
    cur.execute("INSERT INTO diapers (family_id, author_id, timestamp, author_role, author_name) VALUES (?, ?, ?, ?, ?)", 
                (family_id, user_id, timestamp.isoformat(), role, name))
    conn.commit()
    conn.close()

def get_last_feeding_time(user_id):
    conn = sqlite3.connect("babybot.db")
    cur = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º family_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    family_id = get_family_id(user_id)
    if not family_id:
        return None
    
    cur.execute("SELECT timestamp FROM feedings WHERE family_id = ? ORDER BY timestamp DESC LIMIT 1", (family_id,))
    result = cur.fetchone()
    conn.close()
    if result:
        return datetime.fromisoformat(result[0])
    return None

def get_last_diaper_change_for_family(family_id):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–º–µ–Ω—ã –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞ –¥–ª—è —Å–µ–º—å–∏"""
    conn = sqlite3.connect("babybot.db")
    cur = conn.cursor()
    
    cur.execute("SELECT timestamp FROM diapers WHERE family_id = ? ORDER BY timestamp DESC LIMIT 1", (family_id,))
    result = cur.fetchone()
    conn.close()
    if result:
        return datetime.fromisoformat(result[0])
    return None

def get_last_feeding_time_for_family(family_id):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è –¥–ª—è —Å–µ–º—å–∏"""
    conn = sqlite3.connect("babybot.db")
    cur = conn.cursor()
    
    cur.execute("SELECT timestamp FROM feedings WHERE family_id = ? ORDER BY timestamp DESC LIMIT 1", (family_id,))
    result = cur.fetchone()
    conn.close()
    if result:
        return datetime.fromisoformat(result[0])
    return None

def get_user_intervals(family_id):
    conn = sqlite3.connect("babybot.db")
    cur = conn.cursor()
    cur.execute("SELECT feed_interval, diaper_interval FROM settings WHERE family_id = ?", (family_id,))
    result = cur.fetchone()
    conn.close()
    if result:
        return result[0], result[1]
    return 3, 2

def set_user_interval(family_id, feed_interval=None, diaper_interval=None):
    conn = sqlite3.connect("babybot.db")
    cur = conn.cursor()
    if feed_interval is not None:
        cur.execute("UPDATE settings SET feed_interval = ? WHERE family_id = ?", (feed_interval, family_id))
    if diaper_interval is not None:
        cur.execute("UPDATE settings SET diaper_interval = ? WHERE family_id = ?", (diaper_interval, family_id))
    conn.commit()
    conn.close()

def is_tips_enabled(family_id):
    conn = sqlite3.connect("babybot.db")
    cur = conn.cursor()
    cur.execute("SELECT tips_enabled FROM settings WHERE family_id = ?", (family_id,))
    result = cur.fetchone()
    conn.close()
    return result[0] if result else 1

def toggle_tips(family_id):
    conn = sqlite3.connect("babybot.db")
    cur = conn.cursor()
    cur.execute("UPDATE settings SET tips_enabled = CASE WHEN tips_enabled = 1 THEN 0 ELSE 1 END WHERE family_id = ?", (family_id,))
    conn.commit()
    conn.close()

def set_tips_time(family_id, hour, minute):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–≤–µ—Ç–æ–≤"""
    conn = sqlite3.connect("babybot.db")
    cur = conn.cursor()
    cur.execute("UPDATE settings SET tips_time_hour = ?, tips_time_minute = ? WHERE family_id = ?", (hour, minute, family_id))
    conn.commit()
    conn.close()

def get_tips_time(family_id):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–≤–µ—Ç–æ–≤"""
    conn = sqlite3.connect("babybot.db")
    cur = conn.cursor()
    cur.execute("SELECT tips_time_hour, tips_time_minute FROM settings WHERE family_id = ?", (family_id,))
    result = cur.fetchone()
    conn.close()
    if result:
        return result[0], result[1]
    return 9, 0  # –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

def get_feedings_by_day(user_id, date):
    conn = sqlite3.connect("babybot.db")
    cur = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º family_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    family_id = get_family_id(user_id)
    if not family_id:
        return []
    
    start_date = datetime.combine(date, datetime.min.time()).isoformat()
    end_date = datetime.combine(date, datetime.max.time()).isoformat()
    cur.execute("SELECT id, timestamp, author_role, author_name FROM feedings WHERE family_id = ? AND timestamp BETWEEN ? AND ? ORDER BY timestamp", 
                (family_id, start_date, end_date))
    result = cur.fetchall()
    conn.close()
    return result

def get_diapers_by_day(user_id, date):
    conn = sqlite3.connect("babybot.db")
    cur = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º family_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    family_id = get_family_id(user_id)
    if not family_id:
        return []
    
    start_date = datetime.combine(date, datetime.min.time()).isoformat()
    end_date = datetime.combine(date, datetime.max.time()).isoformat()
    cur.execute("SELECT id, timestamp, author_role, author_name FROM diapers WHERE family_id = ? AND timestamp BETWEEN ? AND ? ORDER BY timestamp", 
                (family_id, start_date, end_date))
    result = cur.fetchall()
    conn.close()
    return result

def delete_entry(table, entry_id):
    conn = sqlite3.connect("babybot.db")
    cur = conn.cursor()
    cur.execute(f"DELETE FROM {table} WHERE id = ?", (entry_id,))
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞
def get_random_tip():
    try:
        import csv
        tips = []
        
        # –ß–∏—Ç–∞–µ–º —Å–æ–≤–µ—Ç—ã –∏–∑ CSV —Ñ–∞–π–ª–∞
        with open("data/advice.csv", "r", encoding="utf-8") as f:
            reader = csv.DictReader(f)
            for row in reader:
                tips.append(row["tip"])
        
        if tips:
            return random.choice(tips)
        else:
            return "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤."
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–æ–≤–µ—Ç–æ–≤: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–ø–∞—Å–Ω–æ–π —Å–æ–≤–µ—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return "–ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –∫–∞–∂–¥—ã–π —Ä–µ–±–µ–Ω–æ–∫ —É–Ω–∏–∫–∞–ª–µ–Ω –∏ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è –≤ —Å–≤–æ–µ–º —Ç–µ–º–ø–µ."

# –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫—É–ø–∞–Ω–∏—è
def add_bath(user_id, minutes_ago=0):
    """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –æ –∫—É–ø–∞–Ω–∏–∏"""
    conn = sqlite3.connect("babybot.db")
    cur = conn.cursor()
    
    family_id = get_family_id(user_id)
    if not family_id:
        family_id = create_family("–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–µ–º—å—è", user_id)
    
    role, name = get_member_info(user_id)
    timestamp = get_thai_time() - timedelta(minutes=minutes_ago)
    
    cur.execute("INSERT INTO baths (family_id, author_id, timestamp, author_role, author_name) VALUES (?, ?, ?, ?, ?)", 
                (family_id, user_id, timestamp.isoformat(), role, name))
    conn.commit()
    conn.close()

def get_last_bath_time_for_family(family_id):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫—É–ø–∞–Ω–∏—è –¥–ª—è —Å–µ–º—å–∏"""
    conn = sqlite3.connect("babybot.db")
    cur = conn.cursor()
    
    cur.execute("SELECT timestamp FROM baths WHERE family_id = ? ORDER BY timestamp DESC LIMIT 1", (family_id,))
    result = cur.fetchone()
    conn.close()
    if result:
        return datetime.fromisoformat(result[0])
    return None

def get_bath_settings(family_id):
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –∫—É–ø–∞–Ω–∏–∏"""
    conn = sqlite3.connect("babybot.db")
    cur = conn.cursor()
    cur.execute("SELECT bath_reminder_enabled, bath_reminder_hour, bath_reminder_minute, bath_reminder_period FROM settings WHERE family_id = ?", (family_id,))
    result = cur.fetchone()
    conn.close()
    if result:
        return result[0], result[1], result[2], result[3]
    return 1, 19, 0, 1  # –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

def set_bath_settings(family_id, enabled=None, hour=None, minute=None, period=None):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –∫—É–ø–∞–Ω–∏–∏"""
    conn = sqlite3.connect("babybot.db")
    cur = conn.cursor()
    
    if enabled is not None:
        cur.execute("UPDATE settings SET bath_reminder_enabled = ? WHERE family_id = ?", (enabled, family_id))
    if hour is not None:
        cur.execute("UPDATE settings SET bath_reminder_hour = ? WHERE family_id = ?", (hour, family_id))
    if minute is not None:
        cur.execute("UPDATE settings SET bath_reminder_minute = ? WHERE family_id = ?", (minute, family_id))
    if period is not None:
        cur.execute("UPDATE settings SET bath_reminder_period = ? WHERE family_id = ?", (period, family_id))
    
    conn.commit()
    conn.close()

# –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–≥—Ä –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
def add_activity(user_id, activity_type="tummy_time", minutes_ago=0):
    """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    conn = sqlite3.connect("babybot.db")
    cur = conn.cursor()
    
    family_id = get_family_id(user_id)
    if not family_id:
        family_id = create_family("–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–µ–º—å—è", user_id)
    
    role, name = get_member_info(user_id)
    timestamp = get_thai_time() - timedelta(minutes=minutes_ago)
    
    cur.execute("INSERT INTO activities (family_id, author_id, timestamp, activity_type, author_role, author_name) VALUES (?, ?, ?, ?, ?, ?)", 
                (family_id, user_id, timestamp.isoformat(), activity_type, role, name))
    conn.commit()
    conn.close()

def get_last_activity_time_for_family(family_id, activity_type="tummy_time"):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–µ–º—å–∏"""
    conn = sqlite3.connect("babybot.db")
    cur = conn.cursor()
    
    cur.execute("SELECT timestamp FROM activities WHERE family_id = ? AND activity_type = ? ORDER BY timestamp DESC LIMIT 1", 
                (family_id, activity_type))
    result = cur.fetchone()
    conn.close()
    if result:
        return datetime.fromisoformat(result[0])
    return None

def get_activity_settings(family_id):
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö"""
    conn = sqlite3.connect("babybot.db")
    cur = conn.cursor()
    cur.execute("SELECT activity_reminder_enabled, activity_reminder_interval, baby_age_months FROM settings WHERE family_id = ?", (family_id,))
    result = cur.fetchone()
    conn.close()
    if result:
        return result[0], result[1], result[2]
    return 1, 2, 0  # –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

def set_activity_settings(family_id, enabled=None, interval=None, age_months=None):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö"""
    conn = sqlite3.connect("babybot.db")
    cur = conn.cursor()
    
    if enabled is not None:
        cur.execute("UPDATE settings SET activity_reminder_enabled = ? WHERE family_id = ?", (enabled, family_id))
    if interval is not None:
        cur.execute("UPDATE settings SET activity_reminder_interval = ? WHERE family_id = ?", (interval, family_id))
    if age_months is not None:
        cur.execute("UPDATE settings SET baby_age_months = ? WHERE family_id = ?", (age_months, family_id))
    
    conn.commit()
    conn.close()

def set_baby_birth_date(family_id, birth_date):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –º–∞–ª—ã—à–∞"""
    conn = sqlite3.connect("babybot.db")
    cur = conn.cursor()
    cur.execute("UPDATE settings SET baby_birth_date = ? WHERE family_id = ?", (birth_date, family_id))
    conn.commit()
    conn.close()

def get_baby_birth_date(family_id):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –º–∞–ª—ã—à–∞"""
    conn = sqlite3.connect("babybot.db")
    cur = conn.cursor()
    cur.execute("SELECT baby_birth_date FROM settings WHERE family_id = ?", (family_id,))
    result = cur.fetchone()
    conn.close()
    return result[0] if result else None

def calculate_baby_age_months(birth_date_str):
    """–í—ã—á–∏—Å–ª–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç –º–∞–ª—ã—à–∞ –≤ –º–µ—Å—è—Ü–∞—Ö –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è"""
    if not birth_date_str:
        return 0
    
    try:
        birth_date = datetime.strptime(birth_date_str, "%Y-%m-%d")
        current_date = get_thai_date()
        age_delta = current_date - birth_date.date()
        age_months = age_delta.days / 30.44  # –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ
        return int(age_months)
    except ValueError:
        return 0

def get_age_appropriate_activities(age_months):
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    if age_months < 1:
        return {
            "tummy_time": "–í—ã–∫–ª–∞–¥—ã–≤–∞–Ω–∏–µ –Ω–∞ –∂–∏–≤–æ—Ç 2-3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å –ø–æ 3-5 –º–∏–Ω—É—Ç",
            "play": "–ß–µ—Ä–Ω–æ-–±–µ–ª—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏, –ø–æ–≥—Ä–µ–º—É—à–∫–∏ –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ 20-30 —Å–º",
            "massage": "–õ–µ–≥–∫–∏–π –º–∞—Å—Å–∞–∂ —Ä—É—á–µ–∫ –∏ –Ω–æ–∂–µ–∫"
        }
    elif age_months < 3:
        return {
            "tummy_time": "–í—ã–∫–ª–∞–¥—ã–≤–∞–Ω–∏–µ –Ω–∞ –∂–∏–≤–æ—Ç 3-4 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å –ø–æ 5-10 –º–∏–Ω—É—Ç",
            "play": "–¶–≤–µ—Ç–Ω—ã–µ –∏–≥—Ä—É—à–∫–∏, –ø–æ–¥–≤–µ—Å–Ω—ã–µ –º–æ–±–∏–ª–∏, –ø–µ—Å–µ–Ω–∫–∏",
            "massage": "–ú–∞—Å—Å–∞–∂ –≤—Å–µ–≥–æ —Ç–µ–ª–∞, –≥–∏–º–Ω–∞—Å—Ç–∏–∫–∞"
        }
    elif age_months < 6:
        return {
            "tummy_time": "–í—ã–∫–ª–∞–¥—ã–≤–∞–Ω–∏–µ –Ω–∞ –∂–∏–≤–æ—Ç 4-5 —Ä–∞–∑ –≤ –¥–µ–Ω—å –ø–æ 10-15 –º–∏–Ω—É—Ç",
            "play": "–ò–≥—Ä—É—à–∫–∏ –¥–ª—è —Ö–≤–∞—Ç–∞–Ω–∏—è, –∑–µ—Ä–∫–∞–ª–æ, –ø—Ä—è—Ç–∫–∏",
            "massage": "–ê–∫—Ç–∏–≤–Ω–∞—è –≥–∏–º–Ω–∞—Å—Ç–∏–∫–∞, —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç—ã"
        }
    elif age_months < 9:
        return {
            "tummy_time": "–ü–æ–ª–∑–∞–Ω–∏–µ, —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é",
            "play": "–ü–∏—Ä–∞–º–∏–¥–∫–∏, –∫—É–±–∏–∫–∏, –∏–≥—Ä—ã –≤ –ø—Ä—è—Ç–∫–∏",
            "massage": "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Ö–æ–¥—å–±–µ"
        }
    else:
        return {
            "tummy_time": "–•–æ–¥—å–±–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π, –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã",
            "play": "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ, —Ä–∏—Å–æ–≤–∞–Ω–∏–µ, —Ä–æ–ª–µ–≤—ã–µ –∏–≥—Ä—ã",
            "massage": "–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, —Ç–∞–Ω—Ü—ã"
        }

# –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–Ω–∞
def start_sleep_session(user_id):
    """–ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é —Å–Ω–∞"""
    conn = sqlite3.connect("babybot.db")
    cur = conn.cursor()
    
    family_id = get_family_id(user_id)
    if not family_id:
        family_id = create_family("–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–µ–º—å—è", user_id)
    
    role, name = get_member_info(user_id)
    start_time = get_thai_time()
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é —Å–Ω–∞
    cur.execute("UPDATE sleep_sessions SET is_active = 0, end_time = ? WHERE family_id = ? AND is_active = 1", 
                (start_time.isoformat(), family_id))
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
    cur.execute("INSERT INTO sleep_sessions (family_id, author_id, start_time, is_active, author_role, author_name) VALUES (?, ?, ?, 1, ?, ?)", 
                (family_id, user_id, start_time.isoformat(), role, name))
    conn.commit()
    conn.close()

def end_sleep_session(user_id):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é —Å–Ω–∞"""
    conn = sqlite3.connect("babybot.db")
    cur = conn.cursor()
    
    family_id = get_family_id(user_id)
    if not family_id:
        return False
    
    end_time = get_thai_time()
    
    cur.execute("UPDATE sleep_sessions SET is_active = 0, end_time = ? WHERE family_id = ? AND is_active = 1", 
                (end_time.isoformat(), family_id))
    conn.commit()
    conn.close()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞
    cur.execute("SELECT start_time FROM sleep_sessions WHERE family_id = ? AND end_time = ? ORDER BY id DESC LIMIT 1", 
                (family_id, end_time.isoformat()))
    result = cur.fetchone()
    conn.close()
    
    if result:
        start_time = datetime.fromisoformat(result[0])
        duration = end_time - start_time
        return duration
    return None

def get_active_sleep_session(family_id):
    """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é —Å–Ω–∞ –¥–ª—è —Å–µ–º—å–∏"""
    conn = sqlite3.connect("babybot.db")
    cur = conn.cursor()
    
    cur.execute("SELECT id, start_time, author_role, author_name FROM sleep_sessions WHERE family_id = ? AND is_active = 1 ORDER BY start_time DESC LIMIT 1", (family_id,))
    result = cur.fetchone()
    conn.close()
    
    if result:
        return {
            "id": result[0],
            "start_time": datetime.fromisoformat(result[1]),
            "author_role": result[2],
            "author_name": result[3]
        }
    return None

def get_sleep_settings(family_id):
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–Ω–∞"""
    conn = sqlite3.connect("babybot.db")
    cur = conn.cursor()
    cur.execute("SELECT sleep_monitoring_enabled FROM settings WHERE family_id = ?", (family_id,))
    result = cur.fetchone()
    conn.close()
    if result:
        return result[0]
    return 1  # –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

def set_sleep_settings(family_id, enabled):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–Ω–∞"""
    conn = sqlite3.connect("babybot.db")
    cur = conn.cursor()
    cur.execute("UPDATE settings SET sleep_monitoring_enabled = ? WHERE family_id = ?", (enabled, family_id))
    conn.commit()
    conn.close()

def should_wake_for_feeding(sleep_start_time, feed_interval_hours):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ —Ä–∞–∑–±—É–¥–∏—Ç—å –¥–ª—è –∫–æ—Ä–º–ª–µ–Ω–∏—è"""
    current_time = get_thai_time()
    sleep_duration = current_time - sleep_start_time
    sleep_hours = sleep_duration.total_seconds() / 3600
    
    # –ï—Å–ª–∏ —Å–æ–Ω –¥–ª–∏—Ç—Å—è –¥–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∫–æ—Ä–º–ª–µ–Ω–∏—è, –Ω—É–∂–Ω–æ —Ä–∞–∑–±—É–¥–∏—Ç—å
    return sleep_hours >= feed_interval_hours

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
async def show_bath_settings(event):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—É–ø–∞–Ω–∏—è"""
    uid = event.sender_id
    fid = get_family_id(uid)
    
    if not fid:
        await event.respond("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–µ–º—å—é.")
        return
    
    enabled, hour, minute, period = get_bath_settings(fid)
    status = "üîî –í–∫–ª—é—á–µ–Ω—ã" if enabled else "üîï –û—Ç–∫–ª—é—á–µ–Ω—ã"
    
    message = (
        f"üõÅ **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –∫—É–ø–∞–Ω–∏–∏**\n\n"
        f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
        f"üïê –í—Ä–µ–º—è: {hour:02d}:{minute:02d}\n"
        f"üìÖ –ü–µ—Ä–∏–æ–¥: {period} –¥–µ–Ω—å(–µ–π)\n\n"
        f"üí° –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
    )
    
    buttons = [
        [Button.inline("üïê –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", b"bath_change_time")],
        [Button.inline("üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –ø–µ—Ä–∏–æ–¥", b"bath_change_period")],
        [Button.inline("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", b"back_to_settings")]
    ]
    
    await event.edit(message, buttons=buttons)

async def show_activity_settings(event):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä"""
    uid = event.sender_id
    fid = get_family_id(uid)
    
    if not fid:
        await event.respond("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–µ–º—å—é.")
        return
    
    enabled, interval, age_months = get_activity_settings(fid)
    status = "üîî –í–∫–ª—é—á–µ–Ω—ã" if enabled else "üîï –û—Ç–∫–ª—é—á–µ–Ω—ã"
    
    activities = get_age_appropriate_activities(age_months)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
    baby_birth_date = get_baby_birth_date(fid)
    age_info = ""
    if baby_birth_date:
        age_info = f"üë∂ –í–æ–∑—Ä–∞—Å—Ç: {age_months} –º–µ—Å. (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è: {baby_birth_date})"
    else:
        age_info = f"üë∂ –í–æ–∑—Ä–∞—Å—Ç: {age_months} –º–µ—Å. (—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ–º—å–µ–π')"
    
    message = (
        f"üéÆ **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–± –∏–≥—Ä–∞—Ö**\n\n"
        f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
        f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval} —á.\n"
        f"{age_info}\n\n"
        f"üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞ {age_months} –º–µ—Å.:**\n"
        f"ü¶µ –í—ã–∫–ª–∞–¥—ã–≤–∞–Ω–∏–µ –Ω–∞ –∂–∏–≤–æ—Ç: {activities['tummy_time']}\n"
        f"üéØ –ò–≥—Ä—ã: {activities['play']}\n"
        f"üíÜ –ú–∞—Å—Å–∞–∂: {activities['massage']}\n\n"
        f"üí° –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
    )
    
    buttons = [
        [Button.inline("‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª", b"activity_change_interval")],
        [Button.inline("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", b"back_to_settings")]
    ]
    
    await event.edit(message, buttons=buttons)

async def show_sleep_status(event):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–Ω–∞"""
    uid = event.sender_id
    fid = get_family_id(uid)
    
    if not fid:
        await event.respond("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–µ–º—å—é.")
        return
    
    active_sleep = get_active_sleep_session(fid)
    feed_interval, _ = get_user_intervals(fid)
    
    if active_sleep:
        sleep_duration = get_thai_time() - active_sleep["start_time"]
        hours = int(sleep_duration.total_seconds() // 3600)
        minutes = int((sleep_duration.total_seconds() % 3600) // 60)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Ä–∞–∑–±—É–¥–∏—Ç—å –¥–ª—è –∫–æ—Ä–º–ª–µ–Ω–∏—è
        should_wake = should_wake_for_feeding(active_sleep["start_time"], feed_interval)
        
        if should_wake:
            status = "‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï!** –ú–∞–ª—ã—à —Å–ø–∏—Ç –¥–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∫–æ—Ä–º–ª–µ–Ω–∏—è!"
            recommendation = "üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–∞–∑–±—É–¥–∏—Ç—å –¥–ª—è –∫–æ—Ä–º–ª–µ–Ω–∏—è"
        else:
            status = "üò¥ –ú–∞–ª—ã—à —Å–ø–∏—Ç —Å–ø–æ–∫–æ–π–Ω–æ"
            remaining = feed_interval - (sleep_duration.total_seconds() / 3600)
            recommendation = f"üí° –ú–æ–∂–Ω–æ –Ω–µ –±—É–¥–∏—Ç—å –µ—â–µ {remaining:.1f} —á."
        
        message = (
            f"üò¥ **–°—Ç–∞—Ç—É—Å —Å–Ω–∞**\n\n"
            f"{status}\n\n"
            f"‚è∞ –ù–∞—á–∞–ª–æ —Å–Ω–∞: {active_sleep['start_time'].strftime('%H:%M')}\n"
            f"üïê –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {hours}—á {minutes}–º\n"
            f"üë§ –£–ª–æ–∂–∏–ª: {active_sleep['author_role']} {active_sleep['author_name']}\n"
            f"üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª –∫–æ—Ä–º–ª–µ–Ω–∏—è: {feed_interval} —á.\n\n"
            f"{recommendation}"
        )
    else:
        message = (
            f"üò¥ **–°—Ç–∞—Ç—É—Å —Å–Ω–∞**\n\n"
            f"üåÖ –ú–∞–ª—ã—à –Ω–µ —Å–ø–∏—Ç\n"
            f"üí° –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –∫–æ–≥–¥–∞ –º–∞–ª—ã—à –∑–∞—Å–Ω–µ—Ç"
        )
    
    buttons = [
        [Button.inline("üåô –ú–∞–ª—ã—à –∑–∞—Å–Ω—É–ª", b"sleep_start")],
        [Button.inline("üîô –ù–∞–∑–∞–¥", b"back_to_sleep")]
    ]
    
    await event.edit(message, buttons=buttons)

async def show_sleep_history(event):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–Ω–∞"""
    uid = event.sender_id
    fid = get_family_id(uid)
    
    if not fid:
        await event.respond("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–µ–º—å—é.")
        return
    
    conn = sqlite3.connect("babybot.db")
    cur = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–µ—Å—Å–∏–π —Å–Ω–∞
    cur.execute("""
        SELECT start_time, end_time, author_role, author_name 
        FROM sleep_sessions 
        WHERE family_id = ? AND end_time IS NOT NULL 
        ORDER BY start_time DESC LIMIT 5
    """, (fid,))
    
    sessions = cur.fetchall()
    conn.close()
    
    if sessions:
        message = "üò¥ **–ò—Å—Ç–æ—Ä–∏—è —Å–Ω–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–µ—Å—Å–∏–π):**\n\n"
        
        for i, session in enumerate(sessions, 1):
            start_time = datetime.fromisoformat(session[0])
            end_time = datetime.fromisoformat(session[1])
            duration = end_time - start_time
            hours = int(duration.total_seconds() // 3600)
            minutes = int((duration.total_seconds() % 3600) // 60)
            
            message += (
                f"{i}. {start_time.strftime('%d.%m %H:%M')} - "
                f"{end_time.strftime('%H:%M')} "
                f"({hours}—á {minutes}–º)\n"
                f"   üë§ {session[2]} {session[3]}\n\n"
            )
    else:
        message = "üò¥ **–ò—Å—Ç–æ—Ä–∏—è —Å–Ω–∞**\n\n–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π —Å–Ω–∞."
    
    buttons = [
        [Button.inline("üîô –ù–∞–∑–∞–¥", b"back_to_sleep")]
    ]
    
    await event.edit(message, buttons=buttons)



# ... existing code ...

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
init_db()
scheduler = AsyncIOScheduler()

# –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
def keep_alive_ping():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞"""
    try:
        import urllib.request
        import urllib.error
        
        # –ü–∏–Ω–≥—É–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π health check —Å–µ—Ä–≤–µ—Ä
        try:
            response = urllib.request.urlopen('http://localhost:8000/ping', timeout=5)
            if response.getcode() == 200:
                print(f"‚úÖ Keep-alive ping successful: {time.strftime('%H:%M:%S')}")
            else:
                print(f"‚ö†Ô∏è Keep-alive ping returned status: {response.getcode()}")
        except urllib.error.URLError as e:
            print(f"‚ö†Ô∏è Keep-alive ping failed: {e}")
        except Exception as e:
            print(f"‚ö†Ô∏è Keep-alive ping error: {e}")
            
    except Exception as e:
        print(f"‚ùå Keep-alive ping critical error: {e}")

# –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
scheduler.add_job(keep_alive_ping, 'interval', minutes=5, id='keep_alive_ping')
print("‚è∞ Keep-alive ping scheduled every 5 minutes")

# –î–æ–±–∞–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–π keep-alive –¥–ª—è Render (–∫–∞–∂–¥—ã–µ 3 –º–∏–Ω—É—Ç—ã)
scheduler.add_job(external_keep_alive, 'interval', minutes=3, id='external_keep_alive')
print("‚è∞ External keep-alive scheduled every 3 minutes")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è
family_creation_pending = {}
manual_feeding_pending = {}
join_pending = {}
edit_pending = {}
edit_role_pending = {}
bath_pending = {}
activity_pending = {}
sleep_pending = {}
baby_birth_pending = {}

@client.on(events.NewMessage(pattern='/start'))
async def start(event):
    uid = event.sender_id
    fid = get_family_id(uid)
    
    if fid:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Å–µ–º—å–µ
        family_name = get_family_name(fid)
        role, name = get_member_info(uid)
        
        welcome_message = (
            f"üë∂ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BabyCareBot!**\n\n"
            f"üè† **–í–∞—à–∞ —Å–µ–º—å—è:** {family_name}\n"
            f"üë§ **–í–∞—à–∞ —Ä–æ–ª—å:** {role} {name}\n\n"
            f"üí° –Ø –ø–æ–º–æ–≥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ –º–∞–ª—ã—à–æ–º –∏ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞—Ç—å —É—Ö–æ–¥ –≤ —Å–µ–º—å–µ!"
        )
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–µ–º—å–µ
        welcome_message = (
            f"üë∂ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BabyCareBot!**\n\n"
            f"üéØ **–ß—Ç–æ —è —É–º–µ—é:**\n"
            f"‚Ä¢ üçº –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏—è\n"
            f"‚Ä¢ üß∑ –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å–º–µ–Ω—ã –ø–æ–¥–≥—É–∑–Ω–∏–∫–æ–≤\n"
            f"‚Ä¢ üõÅ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∫—É–ø–∞–Ω–∏–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö\n"
            f"‚Ä¢ üéÆ –£–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –∏–≥—Ä–∞—Ö (–Ω–µ —Ä–∞–Ω—å—à–µ —á–µ–º –∑–∞ 20 –º–∏–Ω –¥–æ –µ–¥—ã)\n"
            f"‚Ä¢ üò¥ –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —Å–æ–Ω –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—Ç—å –æ –∫–æ—Ä–º–ª–µ–Ω–∏–∏\n"
            f"‚Ä¢ üìä –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
            f"‚Ä¢ ‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö\n"
            f"‚Ä¢ üë• –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞—Ç—å —É—Ö–æ–¥ –≤ —Å–µ–º—å–µ\n\n"
            f"üöÄ **–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:**\n"
            f"1Ô∏è‚É£ –°–æ–∑–¥–∞–π—Ç–µ —Å–µ–º—å—é –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π\n"
            f"2Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–æ–ª–∏ —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏\n"
            f"3Ô∏è‚É£ –ù–∞—á–Ω–∏—Ç–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è\n\n"
            f"üí° –ù–∞–∂–º–∏—Ç–µ '‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–º—å–∏!"
        )
    
    # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω–æ–µ –º–µ–Ω—é
    buttons = [
        [Button.text("üçº –ö–æ—Ä–º–ª–µ–Ω–∏–µ"), Button.text("üß∑ –°–º–µ–Ω–∞ –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞")],
        [Button.text("üò¥ –°–æ–Ω"), Button.text("üìú –ò—Å—Ç–æ—Ä–∏—è")],
        [Button.text("üí° –°–æ–≤–µ—Ç"), Button.text("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
        [Button.url("üìä –î–∞—à–±–æ—Ä–¥", "https://babycarebot-dashboard.vercel.app")]
    ]
    
    await event.respond(welcome_message, buttons=buttons)

@client.on(events.NewMessage(pattern='üçº –ö–æ—Ä–º–ª–µ–Ω–∏–µ'))
async def feeding_menu(event):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ—Ä–º–ª–µ–Ω–∏—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–º–µ—Ç–∏—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏–µ"""
    uid = event.sender_id
    fid = get_family_id(uid)
    
    if not fid:
        await event.respond("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–µ–º—å—é.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –∫–æ—Ä–º–ª–µ–Ω–∏—è
    conn = sqlite3.connect("babybot.db")
    cur = conn.cursor()
    cur.execute("SELECT feed_interval FROM settings WHERE family_id = ?", (fid,))
    interval_result = cur.fetchone()
    feed_interval = interval_result[0] if interval_result else 3
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è
    last_feeding = get_last_feeding_time_for_family(fid)
    
    if last_feeding:
        time_since_last = get_thai_time() - last_feeding
        hours_since_last = time_since_last.total_seconds() / 3600
        minutes_since_last = time_since_last.total_seconds() / 60
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        if hours_since_last < feed_interval:
            status = "‚úÖ –í—Ä–µ–º—è –∫–æ—Ä–º–ª–µ–Ω–∏—è –µ—â–µ –Ω–µ –ø–æ–¥–æ—à–ª–æ"
            remaining = feed_interval - hours_since_last
            status_emoji = "üü¢"
        elif hours_since_last < (feed_interval + 0.5):
            status = "‚ö†Ô∏è –ü–æ—Ä–∞ –∫–æ—Ä–º–∏—Ç—å!"
            remaining = 0
            status_emoji = "üü°"
        else:
            status = "üö® –î–æ–ª–≥–æ –Ω–µ –∫–æ—Ä–º–∏–ª–∏!"
            remaining = 0
            status_emoji = "üî¥"
        
        message = (
            f"{status_emoji} **–°—Ç–∞—Ç—É—Å –∫–æ—Ä–º–ª–µ–Ω–∏—è**\n\n"
            f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ: {last_feeding.strftime('%H:%M')}\n"
            f"üïê –ü—Ä–æ—à–ª–æ: {hours_since_last:.1f} —á. ({minutes_since_last:.0f} –º–∏–Ω.)\n"
            f"üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {feed_interval} —á.\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
        )
        
        if remaining > 0:
            message += f"‚è≥ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è: {remaining:.1f} —á."
        else:
            message += f"üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–∫–æ—Ä–º–∏—Ç—å —Å–µ–π—á–∞—Å!"
    else:
        message = (
            f"üçº **–°—Ç–∞—Ç—É—Å –∫–æ—Ä–º–ª–µ–Ω–∏—è**\n\n"
            f"üë∂ –ö–æ—Ä–º–ª–µ–Ω–∏–π –µ—â–µ –Ω–µ –±—ã–ª–æ\n"
            f"üîÑ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {feed_interval} —á.\n"
            f"üí° –ó–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–≤–æ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ!"
        )
    
    conn.close()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    buttons = [
        [Button.inline("üçº –ö–æ—Ä–º–∏—Ç—å —Å–µ–π—á–∞—Å", b"feed_now")],
        [Button.inline("15 –º–∏–Ω –Ω–∞–∑–∞–¥", b"feed_15")],
        [Button.inline("30 –º–∏–Ω –Ω–∞–∑–∞–¥", b"feed_30")],
        [Button.inline("üïí –£–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è", b"feed_manual")]
    ]
    
    await event.respond(message, buttons=buttons)

@client.on(events.NewMessage(pattern='üß∑ –°–º–µ–Ω–∞ –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞'))
async def diaper_menu(event):
    buttons = [
        [Button.inline("–°–µ–π—á–∞—Å", b"diaper_now")],
        [Button.inline("üïí –£–∫–∞–∑–∞—Ç—å –≤—Ä—É—á–Ω—É—é", b"diaper_manual")],
    ]
    await event.respond("üß∑ –ö–æ–≥–¥–∞ –±—ã–ª–∞ —Å–º–µ–Ω–∞ –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞?", buttons=buttons)

@client.on(events.NewMessage(pattern='‚è∞ –ö–æ–≥–¥–∞ –µ–ª?'))
async def last_feed(event):
    time = get_last_feeding_time(event.sender_id)
    if time:
        delta = datetime.now() - time
        h, m = divmod(int(delta.total_seconds() // 60), 60)
        await event.respond(f"üçº –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ –±—ã–ª–æ {h}—á {m}–º –Ω–∞–∑–∞–¥.")
    else:
        await event.respond("‚ùå –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –∫–æ—Ä–º–ª–µ–Ω–∏–∏.")

@client.on(events.NewMessage(pattern='üí° –°–æ–≤–µ—Ç'))
async def tip_command(event):
    tip = get_random_tip()
    await event.respond(tip)

@client.on(events.NewMessage(pattern='‚ÑπÔ∏è –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç'))
async def how_it_works(event):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞"""
    message = (
        f"üìö **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç BabyCareBot**\n\n"
        f"üéØ **–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**\n\n"
        f"üçº **–ö–æ—Ä–º–ª–µ–Ω–∏–µ:**\n"
        f"‚Ä¢ –ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ –≤—Ä–µ–º—è –∫–æ—Ä–º–ª–µ–Ω–∏—è\n"
        f"‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        f"‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã\n\n"
        f"üß∑ **–°–º–µ–Ω–∞ –ø–æ–¥–≥—É–∑–Ω–∏–∫–æ–≤:**\n"
        f"‚Ä¢ –§–∏–∫—Å–∏—Ä—É–π—Ç–µ –≤—Ä–µ–º—è —Å–º–µ–Ω—ã\n"
        f"‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å\n"
        f"‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã\n\n"
        f"üë• **–°–µ–º–µ–π–Ω–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è:**\n"
        f"‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ —Å–µ–º—å—é\n"
        f"‚Ä¢ –ù–∞–∑–Ω–∞—á—å—Ç–µ —Ä–æ–ª–∏ (–ú–∞–º–∞, –ü–∞–ø–∞, –ë–∞–±—É—à–∫–∞)\n"
        f"‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ, –∫—Ç–æ —á—Ç–æ –¥–µ–ª–∞–ª\n\n"
        f"üìä **–ò—Å—Ç–æ—Ä–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        f"‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –∑–∞–ø–∏—Å–∏ –ø–æ –¥–Ω—è–º\n"
        f"‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏\n"
        f"‚Ä¢ –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ —É—Ö–æ–¥\n\n"
        f"‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**\n"
        f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –∫–æ—Ä–º–ª–µ–Ω–∏—è –∏ —Å–º–µ–Ω\n"
        f"‚Ä¢ –í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–≤–µ—Ç–æ–≤\n"
        f"‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ–º—å–µ–π\n\n"
        f"üöÄ **–ù–∞—á–Ω–∏—Ç–µ —Å —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–º—å–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö!**"
    )
    
    buttons = [
        [Button.inline("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", b"settings")]
    ]
    
    await event.respond(message, buttons=buttons)

@client.on(events.NewMessage(pattern='üë§ –ú–æ—è —Ä–æ–ª—å'))
async def my_role_command(event):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    uid = event.sender_id
    fid = get_family_id(uid)
    
    if not fid:
        await event.respond("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–µ–º—å—é.")
        return
    
    role, name = get_member_info(uid)
    
    message = (
        f"üë§ **–í–∞—à–∞ —Ä–æ–ª—å –≤ —Å–µ–º—å–µ:**\n\n"
        f"üé≠ –†–æ–ª—å: {role}\n"
        f"üìù –ò–º—è: {name}\n\n"
        f"üí° –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å"
    )
    
    buttons = [
        [Button.inline("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å", b"edit_role")],
        [Button.inline("üîô –ù–∞–∑–∞–¥", b"back_to_main")]
    ]
    
    await event.respond(message, buttons=buttons)



@client.on(events.NewMessage(pattern='‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏'))
async def settings_menu(event):
    fid = get_family_id(event.sender_id)
    if not fid:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–µ–º—å–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ–º—å–µ–π
        buttons = [
            [Button.inline("üë®‚Äçüë©‚Äçüëß –°–æ–∑–¥–∞—Ç—å —Å–µ–º—å—é", b"create_family")],
            [Button.inline("üë®‚Äçüë©‚Äçüëß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ–º—å–µ–π", b"family_management")]
        ]
        await event.respond("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n‚ùó –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–µ–º—å—é –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π:", buttons=buttons)
        return
    
    feed_i, diaper_i = get_user_intervals(fid)
    tips_on = is_tips_enabled(fid)
    tips_label = "üîï –û—Ç–∫–ª—é—á–∏—Ç—å —Å–æ–≤–µ—Ç—ã" if tips_on else "üîî –í–∫–ª—é—á–∏—Ç—å —Å–æ–≤–µ—Ç—ã"
    tips_hour, tips_minute = get_tips_time(fid)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—É–ø–∞–Ω–∏—è
    bath_enabled, bath_hour, bath_minute, bath_period = get_bath_settings(fid)
    bath_label = "üîï –û—Ç–∫–ª—é—á–∏—Ç—å –∫—É–ø–∞–Ω–∏–µ" if bath_enabled else "üîî –í–∫–ª—é—á–∏—Ç—å –∫—É–ø–∞–Ω–∏–µ"
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä
    activity_enabled, activity_interval, baby_age = get_activity_settings(fid)
    activity_label = "üîï –û—Ç–∫–ª—é—á–∏—Ç—å –∏–≥—Ä—ã" if activity_enabled else "üîî –í–∫–ª—é—á–∏—Ç—å –∏–≥—Ä—ã"
    
    buttons = [
        [Button.inline(f"üçΩ –ò–Ω—Ç–µ—Ä–≤–∞–ª –∫–æ—Ä–º–ª–µ–Ω–∏—è: {feed_i}—á", b"set_feed")],
        [Button.inline(f"üß∑ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞: {diaper_i}—á", b"set_diaper")],
        [Button.inline(tips_label, b"toggle_tips")],
        [Button.inline(f"üïê –í—Ä–µ–º—è —Å–æ–≤–µ—Ç–æ–≤: {tips_hour:02d}:{tips_minute:02d}", b"set_tips_time")],
        [Button.inline(bath_label, b"toggle_bath")],
        [Button.inline(f"üõÅ –ö—É–ø–∞–Ω–∏–µ: {bath_hour:02d}:{bath_minute:02d} / {bath_period}–¥", b"bath_settings")],
        [Button.inline(activity_label, b"activity_toggle")],
        [Button.inline(f"üéÆ –ò–≥—Ä—ã: {activity_interval}—á / {baby_age}–º–µ—Å", b"activity_settings")],
        [Button.inline("üë§ –ú–æ—è —Ä–æ–ª—å", b"my_role")],
        [Button.inline("üë®‚Äçüë©‚Äçüëß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ–º—å–µ–π", b"family_management")]
    ]
    await event.respond("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", buttons=buttons)

async def create_family_cmd(event):
    await event.respond("üë®‚Äçüë©‚Äçüëß –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ–º—å–∏:")
    family_creation_pending[event.sender_id] = True

async def family_management_cmd(event):
    uid = event.sender_id
    fid = get_family_id(uid)
    
    print(f"DEBUG: family_management_cmd –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}, family_id: {fid}")
    
    if fid:
        code = invite_code_for(fid)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–ª—ã—à–µ
        baby_birth_date = get_baby_birth_date(fid)
        baby_age_months = get_activity_settings(fid)[2]  # –ü–æ–ª—É—á–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–≥—Ä
        
        baby_info = ""
        if baby_birth_date:
            baby_info = f"üë∂ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {baby_birth_date}\n"
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã—á–∏—Å–ª—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è
            calculated_age = calculate_baby_age_months(baby_birth_date)
            if calculated_age != baby_age_months:
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
                set_activity_settings(fid, age_months=calculated_age)
                baby_age_months = calculated_age
            
            baby_info += f"üë∂ –í–æ–∑—Ä–∞—Å—Ç: {baby_age_months} –º–µ—Å.\n"
        elif baby_age_months > 0:
            baby_info = f"üë∂ –í–æ–∑—Ä–∞—Å—Ç: {baby_age_months} –º–µ—Å.\n"
        else:
            baby_info = "üë∂ –í–æ–∑—Ä–∞—Å—Ç –º–∞–ª—ã—à–∞ –Ω–µ —É–∫–∞–∑–∞–Ω\n"
        
        buttons = [
            [Button.inline("üë∂ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è", b"set_baby_birth")],
            [Button.inline("üë• –ß–ª–µ–Ω—ã —Å–µ–º—å–∏", b"family_members")],
            [Button.inline("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", b"back_to_settings")]
        ]
        await event.respond(
            f"üë®‚Äçüë©‚Äçüëß **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ–º—å–µ–π**\n\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {get_family_name(fid)}\n"
            f"–ö–æ–¥ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: `{code}`\n\n"
            f"{baby_info}\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            buttons=buttons
        )
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–µ–º—å–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø—Ü–∏–∏
        print(f"DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –Ω–µ –≤ —Å–µ–º—å–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø—Ü–∏–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
        buttons = [
            [Button.inline("üë®‚Äçüë©‚Äçüëß –°–æ–∑–¥–∞—Ç—å —Å–µ–º—å—é", b"create_family")],
            [Button.inline("üîó –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–µ–º—å–µ", b"join_family")],
            [Button.inline("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", b"back_to_settings")]
        ]
        await event.respond(
            f"üë®‚Äçüë©‚Äçüëß **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ–º—å–µ–π**\n\n"
            f"–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–µ–º—å–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            buttons=buttons
        )

async def family_members_cmd(event):
    fid = get_family_id(event.sender_id)
    if fid:
        conn = sqlite3.connect("babybot.db")
        cur = conn.cursor()
        # –ü–æ–ª—É—á–∞–µ–º user_id, role –∏ name –¥–ª—è –≤—Å–µ—Ö —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏
        cur.execute("SELECT user_id, role, name FROM family_members WHERE family_id = ?", (fid,))
        members = cur.fetchall()
        conn.close()
        
        if members:
            text = "üë• **–ß–ª–µ–Ω—ã —Å–µ–º—å–∏:**\n\n"
            for i, (user_id, role, name) in enumerate(members, 1):
                text += f"{i}. {role} {name} (ID: {user_id})\n"
        else:
            text = "üë• –í —Å–µ–º—å–µ –ø–æ–∫–∞ –Ω–µ—Ç —á–ª–µ–Ω–æ–≤."
        
        buttons = [
            [Button.inline("üîô –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Å–µ–º—å–µ–π", b"back_to_family_management")]
        ]
        await event.respond(text, buttons=buttons)
    else:
        await event.respond("‚ùå –û—à–∏–±–∫–∞: —Å–µ–º—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")



@client.on(events.NewMessage(pattern='üìú –ò—Å—Ç–æ—Ä–∏—è'))
async def history_menu(event):
    print(f"DEBUG: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã 'üìú –ò—Å—Ç–æ—Ä–∏—è' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.sender_id}")
    today = get_thai_date()
    buttons = [
        [Button.inline(f"üìÖ {today - timedelta(days=i)}", f"hist_{i}".encode())] for i in range(3)
    ]
    await event.respond("üìñ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏:", buttons=buttons)

@client.on(events.NewMessage(pattern='üõÅ –ö—É–ø–∞–Ω–∏–µ'))
async def bath_menu(event):
    """–ú–µ–Ω—é –∫—É–ø–∞–Ω–∏—è"""
    buttons = [
        [Button.inline("üõÅ –ö—É–ø–∞—Ç—å —Å–µ–π—á–∞—Å", b"bath_now")],
        [Button.inline("15 –º–∏–Ω –Ω–∞–∑–∞–¥", b"bath_15")],
        [Button.inline("30 –º–∏–Ω –Ω–∞–∑–∞–¥", b"bath_30")],
        [Button.inline("üïí –£–∫–∞–∑–∞—Ç—å –≤—Ä—É—á–Ω—É—é", b"bath_manual")],
        [Button.inline("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—É–ø–∞–Ω–∏—è", b"bath_settings")]
    ]
    await event.respond("üõÅ –ö–æ–≥–¥–∞ –±—ã–ª–æ –∫—É–ø–∞–Ω–∏–µ?", buttons=buttons)

@client.on(events.NewMessage(pattern='üéÆ –ò–≥—Ä—ã'))
async def games_menu(event):
    """–ú–µ–Ω—é –∏–≥—Ä –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π"""
    buttons = [
        [Button.inline("ü¶µ –í—ã–∫–ª–∞–¥—ã–≤–∞–Ω–∏–µ –Ω–∞ –∂–∏–≤–æ—Ç", b"activity_tummy")],
        [Button.inline("üéØ –ò–≥—Ä–∞—Ç—å —Å–µ–π—á–∞—Å", b"activity_play")],
        [Button.inline("üíÜ –ú–∞—Å—Å–∞–∂", b"activity_massage")],
        [Button.inline("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä", b"activity_settings")]
    ]
    await event.respond("üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:", buttons=buttons)

@client.on(events.NewMessage(pattern='üò¥ –°–æ–Ω'))
async def sleep_menu(event):
    """–ú–µ–Ω—é —Å–Ω–∞"""
    uid = event.sender_id
    fid = get_family_id(uid)
    
    if not fid:
        await event.respond("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–µ–º—å—é.")
        return
    
    active_sleep = get_active_sleep_session(fid)
    
    if active_sleep:
        # –ú–∞–ª—ã—à —Å–ø–∏—Ç
        sleep_duration = get_thai_time() - active_sleep["start_time"]
        hours = int(sleep_duration.total_seconds() // 3600)
        minutes = int((sleep_duration.total_seconds() % 3600) // 60)
        
        message = (
            f"üò¥ **–ú–∞–ª—ã—à —Å–ø–∏—Ç**\n\n"
            f"‚è∞ –ù–∞—á–∞–ª–æ —Å–Ω–∞: {active_sleep['start_time'].strftime('%H:%M')}\n"
            f"üïê –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {hours}—á {minutes}–º\n"
            f"üë§ –£–ª–æ–∂–∏–ª: {active_sleep['author_role']} {active_sleep['author_name']}\n\n"
            f"üí° –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –∫–æ–≥–¥–∞ –º–∞–ª—ã—à –ø—Ä–æ—Å–Ω–µ—Ç—Å—è"
        )
        
        buttons = [
            [Button.inline("üåÖ –ú–∞–ª—ã—à –ø—Ä–æ—Å–Ω—É–ª—Å—è", b"sleep_end")],
            [Button.inline("üìä –°—Ç–∞—Ç—É—Å —Å–Ω–∞", b"sleep_status")]
        ]
    else:
        # –ú–∞–ª—ã—à –Ω–µ —Å–ø–∏—Ç
        message = (
            f"üò¥ **–ú–∞–ª—ã—à –Ω–µ —Å–ø–∏—Ç**\n\n"
            f"üí° –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –∫–æ–≥–¥–∞ –º–∞–ª—ã—à –∑–∞—Å–Ω–µ—Ç"
        )
        
        buttons = [
            [Button.inline("üåô –ú–∞–ª—ã—à –∑–∞—Å–Ω—É–ª", b"sleep_start")],
            [Button.inline("üìä –ò—Å—Ç–æ—Ä–∏—è —Å–Ω–∞", b"sleep_history")]
        ]
    
    await event.respond(message, buttons=buttons)



@client.on(events.CallbackQuery)
async def callback_handler(event):
    data = event.data.decode()

    if data == "feed_now":
        add_feeding(event.sender_id)
        await event.edit("üçº –ö–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ.")
    elif data == "feed_15":
        add_feeding(event.sender_id, 15)
        await event.edit("üçº –ö–æ—Ä–º–ª–µ–Ω–∏–µ (15 –º–∏–Ω –Ω–∞–∑–∞–¥) –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ.")
    elif data == "feed_30":
        add_feeding(event.sender_id, 30)
        await event.edit("üçº –ö–æ—Ä–º–ª–µ–Ω–∏–µ (30 –º–∏–Ω –Ω–∞–∑–∞–¥) –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ.")
    elif data == "feed_manual":
        manual_feeding_pending[event.sender_id] = True
        await event.respond("üïí –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∫–æ—Ä–º–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):")

    elif data == "diaper_now":
        add_diaper_change(event.sender_id)
        await event.edit("üß∑ –°–º–µ–Ω–∞ –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞.")
    elif data == "diaper_15":
        add_diaper_change(event.sender_id, 15)
        await event.edit("üß∑ –°–º–µ–Ω–∞ –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞ (15 –º–∏–Ω –Ω–∞–∑–∞–¥) –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞.")
    elif data == "diaper_30":
        add_diaper_change(event.sender_id, 30)
        await event.edit("üß∑ –°–º–µ–Ω–∞ –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞ (30 –º–∏–Ω –Ω–∞–∑–∞–¥) –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞.")
    elif data == "diaper_manual":
        manual_feeding_pending[event.sender_id] = "diaper"
        await event.respond("üïí –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Å–º–µ–Ω—ã –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):")

    elif data == "set_feed":
        buttons = [[Button.inline(f"{i} —á", f"feed_{i}".encode())] for i in range(1, 7)]
        await event.edit("üçΩ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –∫–æ—Ä–º–ª–µ–Ω–∏—è:", buttons=buttons)
    elif data == "set_diaper":
        buttons = [[Button.inline(f"{i} —á", f"diaper_{i}".encode())] for i in range(1, 7)]
        await event.edit("üß∑ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–º–µ–Ω—ã –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞:", buttons=buttons)
    elif data.startswith("feed_yesterday_"):
        minutes_ago = int(data.split("_")[-1])
        uid = event.sender_id
        
        print(f"DEBUG: –û–±—Ä–∞–±–æ—Ç–∫–∞ feed_yesterday_ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}")
        print(f"DEBUG: manual_feeding_pending[{uid}] = {manual_feeding_pending.get(uid, '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ')}")
        
        if uid in manual_feeding_pending and isinstance(manual_feeding_pending[uid], dict):
            time_str = manual_feeding_pending[uid]["time"]
            add_feeding(uid, minutes_ago=minutes_ago)
            yesterday = (datetime.now() - timedelta(days=1)).strftime('%d.%m')
            await event.edit(f"‚úÖ –ö–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞ –≤—á–µ—Ä–∞ ({yesterday}) –≤ {time_str} –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ.")
            del manual_feeding_pending[uid]
        else:
            await event.edit("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    
    elif data.startswith("diaper_yesterday_"):
        minutes_ago = int(data.split("_")[-1])
        uid = event.sender_id
        
        print(f"DEBUG: –û–±—Ä–∞–±–æ—Ç–∫–∞ diaper_yesterday_ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}")
        print(f"DEBUG: manual_feeding_pending[{uid}] = {manual_feeding_pending.get(uid, '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ')}")
        
        if uid in manual_feeding_pending and isinstance(manual_feeding_pending[uid], dict):
            time_str = manual_feeding_pending[uid]["time"]
            add_diaper_change(uid, minutes_ago=minutes_ago)
            yesterday = (datetime.now() - timedelta(days=1)).strftime('%d.%m')
            await event.edit(f"‚úÖ –°–º–µ–Ω–∞ –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞ –∑–∞ –≤—á–µ—Ä–∞ ({yesterday}) –≤ {time_str} –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞.")
            del manual_feeding_pending[uid]
        else:
            await event.edit("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫—É–ø–∞–Ω–∏—è –∑–∞ –≤—á–µ—Ä–∞
    elif data.startswith("bath_yesterday_"):
        minutes_ago = int(data.split("_")[-1])
        uid = event.sender_id
        
        if uid in bath_pending and isinstance(bath_pending[uid], dict):
            time_str = bath_pending[uid]["time"]
            add_bath(uid, minutes_ago=minutes_ago)
            yesterday = (get_thai_date() - timedelta(days=1)).strftime('%d.%m')
            await event.edit(f"‚úÖ –ö—É–ø–∞–Ω–∏–µ –∑–∞ –≤—á–µ—Ä–∞ ({yesterday}) –≤ {time_str} –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ.")
            del bath_pending[uid]
        else:
            await event.edit("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    
    elif data.startswith("feed_"):
        hours = int(data.split("_")[1])
        fid = get_family_id(event.sender_id)
        set_user_interval(fid, feed_interval=hours)
        await event.edit(f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –∫–æ—Ä–º–ª–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {hours} —á.")
    elif data.startswith("diaper_"):
        hours = int(data.split("_")[1])
        fid = get_family_id(event.sender_id)
        set_user_interval(fid, diaper_interval=hours)
        await event.edit(f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–º–µ–Ω—ã –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {hours} —á.")
    elif data == "toggle_tips":
        fid = get_family_id(event.sender_id)
        toggle_tips(fid)
        await settings_menu(event)
    
    elif data == "toggle_bath":
        fid = get_family_id(event.sender_id)
        enabled, hour, minute, period = get_bath_settings(fid)
        new_enabled = 0 if enabled else 1
        set_bath_settings(fid, enabled=new_enabled)
        await event.edit(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∫—É–ø–∞–Ω–∏–∏ {'–≤–∫–ª—é—á–µ–Ω—ã' if new_enabled else '–æ—Ç–∫–ª—é—á–µ–Ω—ã'}")
        await asyncio.sleep(2)
        await settings_menu(event)
    
    elif data == "my_role":
        uid = event.sender_id
        role, name = get_member_info(uid)
        
        message = (
            f"üë§ **–í–∞—à–∞ —Ä–æ–ª—å –≤ —Å–µ–º—å–µ:**\n\n"
            f"üé≠ –†–æ–ª—å: {role}\n"
            f"üìù –ò–º—è: {name}\n\n"
            f"üí° –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å"
        )
        
        buttons = [
            [Button.inline("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å", b"edit_role")],
            [Button.inline("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", b"back_to_settings")]
        ]
        
        await event.edit(message, buttons=buttons)
    
    elif data == "edit_role":
        await event.edit("üë§ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:")
        buttons = [
            [Button.inline("üë®‚Äçüë©‚Äçüëß –†–æ–¥–∏—Ç–µ–ª—å", b"role_parent")],
            [Button.inline("üë®‚Äçüë©‚Äçüëß –ú–∞–º–∞", b"role_mom")],
            [Button.inline("üë®‚Äçüë©‚Äçüëß –ü–∞–ø–∞", b"role_dad")],
            [Button.inline("üë®‚Äçüë©‚Äçüëß –ë–∞–±—É—à–∫–∞", b"role_grandma")],
            [Button.inline("üë®‚Äçüë©‚Äçüëß –î–µ–¥—É—à–∫–∞", b"role_grandpa")],
            [Button.inline("üë®‚Äçüë©‚Äçüëß –ù—è–Ω—è", b"role_nanny")],
            [Button.inline("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", b"back_to_settings")]
        ]
        await event.edit("üë§ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:", buttons=buttons )
    
    elif data.startswith("role_"):
        role_map = {
            "role_parent": "–†–æ–¥–∏—Ç–µ–ª—å",
            "role_mom": "–ú–∞–º–∞",
            "role_dad": "–ü–∞–ø–∞",
            "role_grandma": "–ë–∞–±—É—à–∫–∞",
            "role_grandpa": "–î–µ–¥—É—à–∫–∞",
            "role_nanny": "–ù—è–Ω—è"
        }
        role = role_map.get(data, "–†–æ–¥–∏—Ç–µ–ª—å")
        uid = event.sender_id
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è
        await event.edit(f"üë§ –†–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {role}\n\nüìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        edit_role_pending[uid] = {"role": role, "step": "waiting_name"}
    
    elif data == "back_to_main":
        await start(event)
    
    elif data == "set_tips_time":
        await event.edit("üïê –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–≤–µ—Ç–æ–≤:")
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∞—Å–∞
        buttons = []
        for hour in range(0, 24, 2):  # –ö–∞–∂–¥—ã–µ 2 —á–∞—Å–∞
            buttons.append([Button.inline(f"{hour:02d}:00", f"tips_hour_{hour}".encode())])
        buttons.append([Button.inline("üîô –ù–∞–∑–∞–¥", b"back_to_settings")])
        await event.edit("üïê –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–≤–µ—Ç–æ–≤:", buttons=buttons)

    elif data.startswith("tips_hour_"):
        hour = int(data.split("_")[-1])
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–∏–Ω—É—Ç—ã
        buttons = []
        for minute in range(0, 60, 15):  # –ö–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
            buttons.append([Button.inline(f"{hour:02d}:{minute:02d}", f"tips_time_{hour}_{minute}".encode())])
        buttons.append([Button.inline("üîô –ù–∞–∑–∞–¥", b"set_tips_time")])
        await event.edit(f"üïê –í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω—É—Ç—É –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ {hour:02d}:XX:", buttons=buttons)
    
    elif data.startswith("tips_time_"):
        parts = data.split("_")
        hour = int(parts[-2])
        minute = int(parts[-1])
        fid = get_family_id(event.sender_id)
        set_tips_time(fid, hour, minute)
        await event.edit(f"‚úÖ –í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–≤–µ—Ç–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {hour:02d}:{minute:02d}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        await asyncio.sleep(2)
        await settings_menu(event)
    
    elif data.startswith("hist_"):
        print(f"DEBUG: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.sender_id}, data: {data}")
        try:
            index = int(data.split("_")[1])
            target_date = get_thai_date() - timedelta(days=index)
            print(f"DEBUG: –¶–µ–ª–µ–≤–∞—è –¥–∞—Ç–∞: {target_date}")
            
            feedings = get_feedings_by_day(event.sender_id, target_date)
            diapers = get_diapers_by_day(event.sender_id, target_date)
            
            print(f"DEBUG: –ù–∞–π–¥–µ–Ω–æ –∫–æ—Ä–º–ª–µ–Ω–∏–π: {len(feedings) if feedings else 0}")
            print(f"DEBUG: –ù–∞–π–¥–µ–Ω–æ —Å–º–µ–Ω –ø–æ–¥–≥—É–∑–Ω–∏–∫–æ–≤: {len(diapers) if diapers else 0}")
            
            if feedings:
                print(f"DEBUG: –ü–µ—Ä–≤–æ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ: {feedings[0]}")
                print(f"DEBUG: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫ –≤ –∫–æ—Ä–º–ª–µ–Ω–∏–∏: {len(feedings[0])}")
                print(f"DEBUG: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ—Ä–º–ª–µ–Ω–∏—è: id={feedings[0][0]}, time={feedings[0][1]}, role={feedings[0][2] if len(feedings[0]) > 2 else 'N/A'}, name={feedings[0][3] if len(feedings[0]) > 3 else 'N/A'}")
            if diapers:
                print(f"DEBUG: –ü–µ—Ä–≤–∞—è —Å–º–µ–Ω–∞: {diapers[0]}")
                print(f"DEBUG: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫ –≤ —Å–º–µ–Ω–µ: {len(diapers[0])}")
                print(f"DEBUG: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–º–µ–Ω—ã: id={diapers[0][0]}, time={diapers[0][1]}, role={diapers[0][2] if len(diapers[0]) > 2 else 'N/A'}, name={diapers[0][3] if len(diapers[0]) > 3 else 'N/A'}")
        except Exception as e:
            print(f"DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            await event.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", alert=True)
            return

        text = f"üìÖ –ò—Å—Ç–æ—Ä–∏—è –∑–∞ {target_date}:\n\n"

        if feedings:
            text += "üçº –ö–æ—Ä–º–ª–µ–Ω–∏—è:\n"
            for f in feedings:
                time_str = datetime.fromisoformat(f[1]).strftime("%H:%M")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ—Ä–µ (–∏–Ω–¥–µ–∫—Å—ã 2 –∏ 3)
                if len(f) >= 4 and f[2] and f[3]:  # author_role –∏ author_name
                    author_info = f"{f[2]} {f[3]}"
                else:
                    author_info = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                text += f"  ‚Ä¢ {time_str} - {author_info} [ID {f[0]}]\n"
        else:
            text += "üçº –ö–æ—Ä–º–ª–µ–Ω–∏–π –Ω–µ—Ç\n"

        if diapers:
            text += "\nüß∑ –ü–æ–¥–≥—É–∑–Ω–∏–∫–∏:\n"
            for d in diapers:
                time_str = datetime.fromisoformat(d[1]).strftime("%H:%M")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ—Ä–µ (–∏–Ω–¥–µ–∫—Å—ã 2 –∏ 3)
                if len(d) >= 4 and d[2] and d[3]:  # author_role –∏ author_name
                    author_info = f"{d[2]} {d[3]}"
                else:
                    author_info = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                text += f"  ‚Ä¢ {time_str} - {author_info} [ID {d[0]}]\n"
        else:
            text += "\nüß∑ –°–º–µ–Ω –Ω–µ—Ç\n"

        # –ö–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        buttons = []
        for f in feedings:
            buttons.append([Button.inline(f"üçº {f[0]} ‚úèÔ∏è", f"edit_feed_{f[0]}".encode()),
                            Button.inline("üóë", f"del_feed_{f[0]}".encode())])
        for d in diapers:
            buttons.append([Button.inline(f"üß∑ {d[0]} ‚úèÔ∏è", f"edit_diaper_{d[0]}".encode()),
                            Button.inline("üóë", f"del_diaper_{d[0]}".encode())])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–Ω–æ–ø–∫–∏
        if buttons:
            await event.edit(text, buttons=buttons)
        else:
            # –ï—Å–ª–∏ –∫–Ω–æ–ø–æ–∫ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            await event.edit(text)
        return

    elif data.startswith("del_feed_"):
        entry_id = int(data.split("_")[-1])
        delete_entry("feedings", entry_id)
        await event.answer("üóë –£–¥–∞–ª–µ–Ω–æ", alert=True)

    elif data.startswith("del_diaper_"):
        entry_id = int(data.split("_")[-1])
        delete_entry("diapers", entry_id)
        await event.answer("üóë –£–¥–∞–ª–µ–Ω–æ", alert=True)

    elif data.startswith("edit_feed_") or data.startswith("edit_diaper_"):
        entry_id = int(data.split("_")[-1])
        table = "feedings" if "feed" in data else "diapers"
        edit_pending[event.sender_id] = (table, entry_id)
        await event.respond(f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú –¥–ª—è –∑–∞–ø–∏—Å–∏ ID {entry_id}")
    
    elif data == "settings":
        await settings_menu(event)
    
    elif data == "create_family":
        await event.respond("üë®‚Äçüë©‚Äçüëß –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ–º—å–∏:")
        family_creation_pending[event.sender_id] = True
    
    elif data == "join_family":
        await event.respond("üîó –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —Å–µ–º—å–∏:")
        join_pending[event.sender_id] = True
    
    elif data == "family_management":
        await family_management_cmd(event)
    
    elif data == "set_baby_birth":
        baby_birth_pending[event.sender_id] = True
        await event.edit("üë∂ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –º–∞–ª—ã—à–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2024-01-15):")
    
    elif data == "family_members":
        await family_members_cmd(event)
    
    elif data == "back_to_family_management":
        await family_management_cmd(event)
    
    elif data == "back_to_settings":
        await settings_menu(event)
    
    elif data == "feed_cancel":
        uid = event.sender_id
        if uid in manual_feeding_pending:
            del manual_feeding_pending[uid]
        await event.edit("‚ùå –ó–∞–ø–∏—Å—å –∫–æ—Ä–º–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    
    elif data == "diaper_cancel":
        uid = event.sender_id
        if uid in manual_feeding_pending:
            del manual_feeding_pending[uid]
        await event.edit("‚ùå –ó–∞–ø–∏—Å—å —Å–º–µ–Ω—ã –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫—É–ø–∞–Ω–∏—è
    elif data == "bath_now":
        add_bath(event.sender_id)
        await event.edit("üõÅ –ö—É–ø–∞–Ω–∏–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ.")
    elif data == "bath_15":
        add_bath(event.sender_id, 15)
        await event.edit("üõÅ –ö—É–ø–∞–Ω–∏–µ (15 –º–∏–Ω –Ω–∞–∑–∞–¥) –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ.")
    elif data == "bath_30":
        add_bath(event.sender_id, 30)
        await event.edit("üõÅ –ö—É–ø–∞–Ω–∏–µ (30 –º–∏–Ω –Ω–∞–∑–∞–¥) –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ.")
    elif data == "bath_manual":
        bath_pending[event.sender_id] = True
        await event.respond("üïí –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∫—É–ø–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):")
    elif data == "bath_settings":
        await show_bath_settings(event)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–≥—Ä
    elif data == "activity_tummy":
        add_activity(event.sender_id, "tummy_time")
        await event.edit("ü¶µ –í—ã–∫–ª–∞–¥—ã–≤–∞–Ω–∏–µ –Ω–∞ –∂–∏–≤–æ—Ç –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ.")
    elif data == "activity_play":
        add_activity(event.sender_id, "play")
        await event.edit("üéØ –ò–≥—Ä–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞.")
    elif data == "activity_massage":
        add_activity(event.sender_id, "massage")
        await event.edit("üíÜ –ú–∞—Å—Å–∞–∂ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω.")
    elif data == "activity_settings":
        await show_activity_settings(event)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–Ω–∞
    elif data == "sleep_start":
        start_sleep_session(event.sender_id)
        await event.edit("üåô –ú–∞–ª—ã—à –∑–∞—Å–Ω—É–ª. –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–æ–Ω...")
    elif data == "sleep_end":
        duration = end_sleep_session(event.sender_id)
        if duration:
            hours = int(duration.total_seconds() // 3600)
            minutes = int((duration.total_seconds() % 3600) // 60)
            await event.edit(f"üåÖ –ú–∞–ª—ã—à –ø—Ä–æ—Å–Ω—É–ª—Å—è! –°–ø–∞–ª {hours}—á {minutes}–º.")
        else:
            await event.edit("üåÖ –ú–∞–ª—ã—à –ø—Ä–æ—Å–Ω—É–ª—Å—è!")
    elif data == "sleep_status":
        await show_sleep_status(event)
    elif data == "sleep_history":
        await show_sleep_history(event)
    

    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫—É–ø–∞–Ω–∏—è
    elif data.startswith("bath_period_"):
        period = int(data.split("_")[-1])
        fid = get_family_id(event.sender_id)
        set_bath_settings(fid, period=period)
        await event.edit(f"‚úÖ –ü–µ—Ä–∏–æ–¥ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –∫—É–ø–∞–Ω–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {period} –¥–µ–Ω—å(–µ–π)")
        await asyncio.sleep(2)
        await settings_menu(event)
    
    elif data.startswith("bath_time_"):
        time_parts = data.split("_")
        hour = int(time_parts[-2])
        minute = int(time_parts[-1])
        fid = get_family_id(event.sender_id)
        set_bath_settings(fid, hour=hour, minute=minute)
        await event.edit(f"‚úÖ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –∫—É–ø–∞–Ω–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {hour:02d}:{minute:02d}")
        await asyncio.sleep(2)
        await settings_menu(event)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–≥—Ä
    elif data.startswith("activity_interval_"):
        interval = int(data.split("_")[-1])
        fid = get_family_id(event.sender_id)
        set_activity_settings(fid, interval=interval)
        await event.edit(f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–± –∏–≥—Ä–∞—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {interval} —á.")
        await asyncio.sleep(2)
        await settings_menu(event)
    

    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–ù–∞–∑–∞–¥"
    elif data == "back_to_games":
        await games_menu(event)
    elif data == "back_to_sleep":
        await sleep_menu(event)
    elif data == "bath_cancel":
        uid = event.sender_id
        if uid in bath_pending:
            del bath_pending[uid]
        await event.edit("‚ùå –ó–∞–ø–∏—Å—å –∫—É–ø–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫—É–ø–∞–Ω–∏—è
    elif data == "bath_change_time":
        await event.edit("üïê –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –∫—É–ø–∞–Ω–∏–∏:")
        buttons = []
        for hour in range(18, 22):  # –í–µ—á–µ—Ä–Ω–∏–µ —á–∞—Å—ã –¥–ª—è –∫—É–ø–∞–Ω–∏—è
            for minute in [0, 15, 30, 45]:
                buttons.append([Button.inline(f"{hour:02d}:{minute:02d}", f"bath_time_{hour}_{minute}".encode())])
        buttons.append([Button.inline("üîô –ù–∞–∑–∞–¥", b"bath_settings")])
        await event.edit("üïê –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –∫—É–ø–∞–Ω–∏–∏:", buttons=buttons)
    
    elif data == "bath_change_period":
        await event.edit("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –∫—É–ø–∞–Ω–∏–∏:")
        buttons = [
            [Button.inline("1 –¥–µ–Ω—å", b"bath_period_1")],
            [Button.inline("2 –¥–Ω—è", b"bath_period_2")],
            [Button.inline("3 –¥–Ω—è", b"bath_period_3")],
            [Button.inline("üîô –ù–∞–∑–∞–¥", b"bath_settings")]
        ]
        await event.edit("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –∫—É–ø–∞–Ω–∏–∏:", buttons=buttons)
    
    elif data == "bath_toggle":
        fid = get_family_id(event.sender_id)
        enabled, hour, minute, period = get_bath_settings(fid)
        new_enabled = 0 if enabled else 1
        set_bath_settings(fid, enabled=new_enabled)
        await event.edit(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∫—É–ø–∞–Ω–∏–∏ {'–≤–∫–ª—é—á–µ–Ω—ã' if new_enabled else '–æ—Ç–∫–ª—é—á–µ–Ω—ã'}")
        await asyncio.sleep(2)
        await show_bath_settings(event)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–≥—Ä
    elif data == "activity_change_interval":
        await event.edit("‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–± –∏–≥—Ä–∞—Ö:")
        buttons = [
            [Button.inline("1 —á–∞—Å", b"activity_interval_1")],
            [Button.inline("2 —á–∞—Å–∞", b"activity_interval_2")],
            [Button.inline("3 —á–∞—Å–∞", b"activity_interval_3")],
            [Button.inline("4 —á–∞—Å–∞", b"activity_interval_4")],
            [Button.inline("üîô –ù–∞–∑–∞–¥", b"activity_settings")]
        ]
        await event.edit("‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–± –∏–≥—Ä–∞—Ö:", buttons=buttons)
    

    
    elif data == "activity_toggle":
        fid = get_family_id(event.sender_id)
        enabled, interval, age_months = get_activity_settings(fid)
        new_enabled = 0 if enabled else 1
        set_activity_settings(fid, enabled=new_enabled)
        await event.edit(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –∏–≥—Ä–∞—Ö {'–≤–∫–ª—é—á–µ–Ω—ã' if new_enabled else '–æ—Ç–∫–ª—é—á–µ–Ω—ã'}")
        await asyncio.sleep(2)
        await settings_menu(event)

@client.on(events.NewMessage)
async def handle_text(event):
    uid = event.sender_id

    if uid in manual_feeding_pending:
        user_input = event.raw_text.strip()
        action_type = manual_feeding_pending[uid]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∑–∞ –¥–µ–π—Å—Ç–≤–∏–µ
        if action_type == "diaper":
            print(f"DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –≤–≤–µ–ª –≤—Ä–µ–º—è –¥–ª—è —Å–º–µ–Ω—ã –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞: '{user_input}'")
            action_name = "—Å–º–µ–Ω–∞ –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞"
            add_func = add_diaper_change
            callback_prefix = "diaper_yesterday_"
            cancel_callback = "diaper_cancel"
        else:
            print(f"DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –≤–≤–µ–ª –≤—Ä–µ–º—è –¥–ª—è –∫–æ—Ä–º–ª–µ–Ω–∏—è: '{user_input}'")
            action_name = "–∫–æ—Ä–º–ª–µ–Ω–∏–µ"
            add_func = add_feeding
            callback_prefix = "feed_yesterday_"
            cancel_callback = "feed_cancel"
        
        try:
            # –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            t = datetime.strptime(user_input, "%H:%M")
            print(f"DEBUG: –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ —É—Å–ø–µ—à–µ–Ω: {t}")
            
            # –°–æ–∑–¥–∞–µ–º datetime –æ–±—ä–µ–∫—Ç –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º (–≤ —Ç–∞–π—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏)
            today = get_thai_date()
            # –°–æ–∑–¥–∞–µ–º datetime –æ–±—ä–µ–∫—Ç —Å —Ç–∞–π—Å–∫–∏–º —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º
            thai_tz = pytz.timezone('Asia/Bangkok')
            dt = thai_tz.localize(datetime.combine(today, t.time()))
            now = get_thai_time()
            
            print(f"DEBUG: –°–µ–≥–æ–¥–Ω—è (–¢–∞–∏–ª–∞–Ω–¥): {today}")
            print(f"DEBUG: –í–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {dt}")
            print(f"DEBUG: –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (–¢–∞–∏–ª–∞–Ω–¥): {now}")
            print(f"DEBUG: UTC –≤—Ä–µ–º—è: {datetime.now(pytz.UTC)}")
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤ –º–∏–Ω—É—Ç–∞—Ö
            diff = int((now - dt).total_seconds() // 60)
            print(f"DEBUG: –†–∞–∑–Ω–∏—Ü–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö: {diff}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –Ω–µ –≤ –±—É–¥—É—â–µ–º –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –≤ –ø—Ä–æ—à–ª–æ–º
            if diff < 0:
                print(f"DEBUG: –í—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º, —Ä–∞–∑–Ω–∏—Ü–∞: {diff}")
                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø–∏—Å—å –∑–∞ –ø—Ä–æ—à–ª—ã–π –¥–µ–Ω—å
                yesterday = today - timedelta(days=1)
                yesterday_dt = thai_tz.localize(datetime.combine(yesterday, t.time()))
                yesterday_diff = int((now - yesterday_dt).total_seconds() // 60)
                
                if yesterday_diff >= 0 and yesterday_diff <= 1440:
                    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è
                    buttons = [
                        [Button.inline("‚úÖ –î–∞, –∑–∞ –≤—á–µ—Ä–∞", f"{callback_prefix}{yesterday_diff}".encode())],
                        [Button.inline("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", cancel_callback.encode())]
                    ]
                    await event.respond(
                        f"üïí –í—Ä–µ–º—è {user_input} –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.\n"
                        f"–•–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø–∏—Å—å {action_name} –∑–∞ –≤—á–µ—Ä–∞ ({yesterday.strftime('%d.%m')})?",
                        buttons=buttons)
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                    manual_feeding_pending[uid] = {"type": action_type, "time": user_input, "minutes_ago": yesterday_diff}
                    print(f"DEBUG: –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ manual_feeding_pending[{uid}] = {manual_feeding_pending[uid]}")
                    return
                else:
                    await event.respond("‚ùå –ù–µ–ª—å–∑—è —É–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è.")
                    return
            elif diff > 1440:  # –±–æ–ª—å—à–µ 24 —á–∞—Å–æ–≤
                print(f"DEBUG: –í—Ä–µ–º—è —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –≤ –ø—Ä–æ—à–ª–æ–º, —Ä–∞–∑–Ω–∏—Ü–∞: {diff}")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ —ç—Ç–æ –±—ã—Ç—å –≤—Ä–µ–º—è –∑–∞ –≤—á–µ—Ä–∞
                yesterday = today - timedelta(days=1)
                yesterday_dt = thai_tz.localize(datetime.combine(yesterday, t.time()))
                yesterday_diff = int((now - yesterday_dt).total_seconds() // 60)
                
                if yesterday_diff >= 0 and yesterday_diff <= 1440:
                    print(f"DEBUG: –í—Ä–µ–º—è –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è, —Ä–∞–∑–Ω–∏—Ü–∞: {yesterday_diff}")
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–ø–∏—Å–∞—Ç—å –∑–∞ –≤—á–µ—Ä–∞
                    buttons = [
                        [Button.inline("‚úÖ –î–∞, –∑–∞ –≤—á–µ—Ä–∞", f"{callback_prefix}{yesterday_diff}".encode())],
                        [Button.inline("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", cancel_callback.encode())]
                    ]
                    await event.respond(
                        f"üïí –í—Ä–µ–º—è {user_input} —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –≤ –ø—Ä–æ—à–ª–æ–º –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è.\n"
                        f"–•–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø–∏—Å—å {action_name} –∑–∞ –≤—á–µ—Ä–∞ ({yesterday.strftime('%d.%m')})?",
                        buttons=buttons)
                    manual_feeding_pending[uid] = {"type": action_type, "time": user_input, "minutes_ago": yesterday_diff}
                    print(f"DEBUG: –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ manual_feeding_pending[{uid}] = {manual_feeding_pending[uid]}")
                    return
                else:
                    await event.respond("‚ùå –í—Ä–µ–º—è —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –≤ –ø—Ä–æ—à–ª–æ–º. –ú–∞–∫—Å–∏–º—É–º 24 —á–∞—Å–∞ –Ω–∞–∑–∞–¥.")
                    return
            
            # –ï—Å–ª–∏ –≤—Ä–µ–º—è –≤ –ø—Ä–æ—à–ª–æ–º, –Ω–æ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ
            if diff >= 0:
                print(f"DEBUG: –î–æ–±–∞–≤–ª—è–µ–º {action_name}, minutes_ago: {diff}")
                add_func(uid, minutes_ago=diff)
                await event.respond(f"‚úÖ {action_name.capitalize()} –≤ {user_input} –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ.")
            else:
                await event.respond("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏.")
            
            # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            if uid in manual_feeding_pending:
                del manual_feeding_pending[uid]
        except ValueError as e:
            print(f"DEBUG: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏: {e}")
            await event.respond("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14:30)")
            # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
            if uid in manual_feeding_pending:
                del manual_feeding_pending[uid]
        except Exception as e:
            print(f"DEBUG: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            await event.respond(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–π –æ—à–∏–±–∫–µ
            if uid in manual_feeding_pending:
                del manual_feeding_pending[uid]
        return

    if uid in family_creation_pending:
        name = event.raw_text.strip()
        fid = create_family(name, uid)
        del family_creation_pending[uid]
        code = invite_code_for(fid)
        await event.respond(f"‚úÖ –°–µ–º—å—è —Å–æ–∑–¥–∞–Ω–∞. –ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: `{code}`")
        return
    
    if uid in join_pending:
        code = event.raw_text.strip()
        family_id, family_name = join_family_by_code(code, uid)
        del join_pending[uid]
        
        if family_id:
            await event.respond(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Å–µ–º—å–µ '{family_name}'!")
        else:
            await event.respond(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–µ–º—å–µ: {family_name}")
        return
    
    if uid in edit_role_pending:
        user_input = event.raw_text.strip()
        role_data = edit_role_pending[uid]
        
        if role_data["step"] == "waiting_name":
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å –∏ –∏–º—è
            set_member_role(uid, role_data["role"], user_input)
            del edit_role_pending[uid]
            
            await event.respond(
                f"‚úÖ –†–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
                f"üé≠ –†–æ–ª—å: {role_data['role']}\n"
                f"üìù –ò–º—è: {user_input}\n\n"
                f"üí° –¢–µ–ø–µ—Ä—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è, –∫—Ç–æ –∏–º–µ–Ω–Ω–æ —É—Ö–∞–∂–∏–≤–∞–µ—Ç –∑–∞ –º–∞–ª—ã—à–æ–º!"
            )
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –º–∞–ª—ã—à–∞
    if uid in baby_birth_pending:
        user_input = event.raw_text.strip()
        
        try:
            # –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω—É—é –¥–∞—Ç—É
            birth_date = datetime.strptime(user_input, "%Y-%m-%d")
            current_date = get_thai_date()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –±—É–¥—É—â–µ–º
            if birth_date.date() > current_date:
                await event.respond("‚ùå –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–∞—è (–±–æ–ª—å—à–µ 5 –ª–µ—Ç –Ω–∞–∑–∞–¥)
            if (current_date - birth_date.date()).days > 1825:  # 5 –ª–µ—Ç
                await event.respond("‚ùå –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 5 –ª–µ—Ç –Ω–∞–∑–∞–¥. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É.")
                return
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
            fid = get_family_id(uid)
            set_baby_birth_date(fid, user_input)
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã—á–∏—Å–ª—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç
            age_months = calculate_baby_age_months(user_input)
            set_activity_settings(fid, age_months=age_months)
            
            await event.respond(
                f"‚úÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –º–∞–ª—ã—à–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
                f"üë∂ –î–∞—Ç–∞: {birth_date.strftime('%d.%m.%Y')}\n"
                f"üë∂ –í–æ–∑—Ä–∞—Å—Ç: {age_months} –º–µ—Å.\n\n"
                f"üí° –¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –≤–æ–∑—Ä–∞—Å—Ç –∏ –¥–∞–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏!"
            )
            
            # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            del baby_birth_pending[uid]
        except ValueError:
            await event.respond("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2024-01-15)")
        except Exception as e:
            await event.respond(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            del baby_birth_pending[uid]
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª—è –∫—É–ø–∞–Ω–∏—è
    if uid in bath_pending:
        user_input = event.raw_text.strip()
        
        try:
            # –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            t = datetime.strptime(user_input, "%H:%M")
            
            # –°–æ–∑–¥–∞–µ–º datetime –æ–±—ä–µ–∫—Ç –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
            today = get_thai_date()
            thai_tz = pytz.timezone('Asia/Bangkok')
            dt = thai_tz.localize(datetime.combine(today, t.time()))
            now = get_thai_time()
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤ –º–∏–Ω—É—Ç–∞—Ö
            diff = int((now - dt).total_seconds() // 60)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –Ω–µ –≤ –±—É–¥—É—â–µ–º –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –≤ –ø—Ä–æ—à–ª–æ–º
            if diff < 0:
                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø–∏—Å—å –∑–∞ –ø—Ä–æ—à–ª—ã–π –¥–µ–Ω—å
                yesterday = today - timedelta(days=1)
                yesterday_dt = thai_tz.localize(datetime.combine(yesterday, t.time()))
                yesterday_diff = int((now - yesterday_dt).total_seconds() // 60)
                
                if yesterday_diff >= 0 and yesterday_diff <= 1440:
                    buttons = [
                        [Button.inline("‚úÖ –î–∞, –∑–∞ –≤—á–µ—Ä–∞", f"bath_yesterday_{yesterday_diff}".encode())],
                        [Button.inline("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", b"bath_cancel")]
                    ]
                    await event.respond(
                        f"üïí –í—Ä–µ–º—è {user_input} –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.\n"
                        f"–•–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø–∏—Å—å –∫—É–ø–∞–Ω–∏—è –∑–∞ –≤—á–µ—Ä–∞ ({yesterday.strftime('%d.%m')})?",
                        buttons=buttons)
                    bath_pending[uid] = {"time": user_input, "minutes_ago": yesterday_diff}
                    return
                else:
                    await event.respond("‚ùå –ù–µ–ª—å–∑—è —É–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è.")
                    del bath_pending[uid]
                    return
            elif diff > 1440:  # –±–æ–ª—å—à–µ 24 —á–∞—Å–æ–≤
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ —ç—Ç–æ –±—ã—Ç—å –≤—Ä–µ–º—è –∑–∞ –≤—á–µ—Ä–∞
                yesterday = today - timedelta(days=1)
                yesterday_dt = thai_tz.localize(datetime.combine(yesterday, t.time()))
                yesterday_diff = int((now - yesterday_dt).total_seconds() // 60)
                
                if yesterday_diff >= 0 and yesterday_diff <= 1440:
                    buttons = [
                        [Button.inline("‚úÖ –î–∞, –∑–∞ –≤—á–µ—Ä–∞", f"bath_yesterday_{yesterday_diff}".encode())],
                        [Button.inline("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", b"bath_cancel")]
                    ]
                    await event.respond(
                        f"üïí –í—Ä–µ–º—è {user_input} —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –≤ –ø—Ä–æ—à–ª–æ–º –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è.\n"
                        f"–•–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø–∏—Å—å –∫—É–ø–∞–Ω–∏—è –∑–∞ –≤—á–µ—Ä–∞ ({yesterday.strftime('%d.%m')})?",
                        buttons=buttons)
                    bath_pending[uid] = {"time": user_input, "minutes_ago": yesterday_diff}
                    return
                else:
                    await event.respond("‚ùå –í—Ä–µ–º—è —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –≤ –ø—Ä–æ—à–ª–æ–º. –ú–∞–∫—Å–∏–º—É–º 24 —á–∞—Å–∞ –Ω–∞–∑–∞–¥.")
                    del bath_pending[uid]
                    return
            
            # –ï—Å–ª–∏ –≤—Ä–µ–º—è –≤ –ø—Ä–æ—à–ª–æ–º, –Ω–æ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ
            if diff >= 0:
                add_bath(uid, minutes_ago=diff)
                await event.respond(f"‚úÖ –ö—É–ø–∞–Ω–∏–µ –≤ {user_input} –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ.")
            else:
                await event.respond("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏.")
            
            # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            if uid in bath_pending:
                del bath_pending[uid]
        except ValueError:
            await event.respond("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14:30)")
            del bath_pending[uid]
        except Exception as e:
            await event.respond(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            del bath_pending[uid]
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
    if uid in activity_pending:
        user_input = event.raw_text.strip()
        activity_data = activity_pending[uid]
        
        try:
            # –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            t = datetime.strptime(user_input, "%H:%M")
            
            # –°–æ–∑–¥–∞–µ–º datetime –æ–±—ä–µ–∫—Ç –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
            today = get_thai_date()
            thai_tz = pytz.timezone('Asia/Bangkok')
            dt = thai_tz.localize(datetime.combine(today, t.time()))
            now = get_thai_time()
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤ –º–∏–Ω—É—Ç–∞—Ö
            diff = int((now - dt).total_seconds() // 60)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –Ω–µ –≤ –±—É–¥—É—â–µ–º –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –≤ –ø—Ä–æ—à–ª–æ–º
            if diff < 0 or diff > 1440:
                await event.respond("‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º, –Ω–æ –Ω–µ –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥.")
                del activity_pending[uid]
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            add_activity(uid, activity_data["type"], minutes_ago=diff)
            await event.respond(f"‚úÖ {activity_data['name']} –≤ {user_input} –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ.")
            
            # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            del activity_pending[uid]
        except ValueError:
            await event.respond("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14:30)")
            del activity_pending[uid]
        except Exception as e:
            await event.respond(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            del activity_pending[uid]
        return



def get_last_feeding_time_for_family(family_id):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è –¥–ª—è —Å–µ–º—å–∏"""
    conn = sqlite3.connect("babybot.db")
    cur = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏
    cur.execute("SELECT user_id FROM family_members WHERE family_id = ?", (family_id,))
    members = cur.fetchall()
    
    if not members:
        conn.close()
        return None
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏
    member_ids = [str(member[0]) for member in members]
    placeholders = ','.join(['?' for _ in member_ids])
    
    cur.execute(f"""
        SELECT timestamp FROM feedings 
        WHERE family_id = ? 
        ORDER BY timestamp DESC 
        LIMIT 1
    """, (family_id,))
    
    result = cur.fetchone()
    conn.close()
    
    if result:
        return datetime.fromisoformat(result[0])
    return None

def should_send_feeding_reminder(family_id):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∫–æ—Ä–º–ª–µ–Ω–∏–∏"""
    conn = sqlite3.connect("babybot.db")
    cur = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –∫–æ—Ä–º–ª–µ–Ω–∏—è –¥–ª—è —Å–µ–º—å–∏
    cur.execute("SELECT feed_interval FROM settings WHERE family_id = ?", (family_id,))
    result = cur.fetchone()
    
    if not result:
        conn.close()
        return False
    
    feed_interval = result[0]  # –≤ —á–∞—Å–∞—Ö
    last_feeding = get_last_feeding_time_for_family(family_id)
    
    if not last_feeding:
        # –ï—Å–ª–∏ –∫–æ—Ä–º–ª–µ–Ω–∏–π –µ—â–µ –Ω–µ –±—ã–ª–æ, –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–º—å–∏
        return True
    
    # –í—ã—á–∏—Å–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—à–ª–æ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è
    time_since_last = datetime.now() - last_feeding
    hours_since_last = time_since_last.total_seconds() / 3600
    
    # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ + 30 –º–∏–Ω—É—Ç (–±—É—Ñ–µ—Ä), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    return hours_since_last >= (feed_interval + 0.5)
    
    conn.close()

@scheduler.scheduled_job('interval', minutes=30)
async def check_feeding_reminders():
    """–ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∫–æ—Ä–º–ª–µ–Ω–∏–∏"""
    try:
        conn = sqlite3.connect("babybot.db")
        cur = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ–º—å–∏ —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
        cur.execute("SELECT family_id FROM settings WHERE tips_enabled = 1")
        families = cur.fetchall()
        
        for (family_id,) in families:
            if should_send_feeding_reminder(family_id):
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏
                cur.execute("SELECT user_id FROM family_members WHERE family_id = ?", (family_id,))
                members = cur.fetchall()
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –∫–æ—Ä–º–ª–µ–Ω–∏—è
                cur.execute("SELECT feed_interval FROM settings WHERE family_id = ?", (family_id,))
                interval_result = cur.fetchone()
                feed_interval = interval_result[0] if interval_result else 3
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è
                last_feeding = get_last_feeding_time_for_family(family_id)
                
                if last_feeding:
                    time_since_last = datetime.now() - last_feeding
                    hours_since_last = time_since_last.total_seconds() / 3600
                    message = (
                        f"üçº **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∫–æ—Ä–º–ª–µ–Ω–∏–∏!**\n\n"
                        f"‚è∞ –ü—Ä–æ—à–ª–æ: {hours_since_last:.1f} —á. —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è\n"
                        f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ: {last_feeding.strftime('%H:%M')}\n"
                        f"üîÑ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {feed_interval} —á.\n\n"
                        f"üí° –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–∫–æ—Ä–º–∏—Ç—å –º–∞–ª—ã—à–∞!"
                    )
                else:
                    message = (
                        f"üçº **–ü–µ—Ä–≤–æ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ!**\n\n"
                        f"üë∂ –ü–æ—Ä–∞ –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏—è\n"
                        f"üîÑ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {feed_interval} —á.\n\n"
                        f"üí° –ó–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–≤–æ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ!"
                    )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º —á–ª–µ–Ω–∞–º —Å–µ–º—å–∏
                for (user_id,) in members:
                    try:
                        await client.send_message(user_id, message)
                        print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∫–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        conn.close()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ check_feeding_reminders: {e}")

@scheduler.scheduled_job('interval', minutes=1)
async def send_scheduled_tips():
    """–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ–º—å–∏"""
    try:
        current_time = datetime.now()
        current_hour = current_time.hour
        current_minute = current_time.minute
        
        conn = sqlite3.connect("babybot.db")
        cur = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ–º—å–∏ —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏
        cur.execute("SELECT family_id, tips_time_hour, tips_time_minute FROM settings WHERE tips_enabled = 1")
        families = cur.fetchall()
        
        for (family_id, tips_hour, tips_minute) in families:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ä–∞ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–≤–µ—Ç—ã –¥–ª—è —ç—Ç–æ–π —Å–µ–º—å–∏
            if current_hour == tips_hour and current_minute == tips_minute:
                tip = get_random_tip()
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏
                cur.execute("SELECT user_id FROM family_members WHERE family_id = ?", (family_id,))
                members = cur.fetchall()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–≤–µ—Ç –≤—Å–µ–º —á–ª–µ–Ω–∞–º —Å–µ–º—å–∏
                for (user_id,) in members:
                    try:
                        await client.send_message(user_id, tip)
                        print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–æ–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –≤ {current_hour:02d}:{current_minute:02d}")
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        conn.close()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ send_scheduled_tips: {e}")

@scheduler.scheduled_job('interval', minutes=15)
async def send_scheduled_feeding_reminders():
    """–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∫–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
    try:
        conn = sqlite3.connect("babybot.db")
        cur = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ–º—å–∏ —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
        cur.execute("SELECT family_id FROM settings WHERE tips_enabled = 1")
        families = cur.fetchall()
        
        for (family_id,) in families:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –∫–æ—Ä–º–ª–µ–Ω–∏—è
            cur.execute("SELECT feed_interval FROM settings WHERE family_id = ?", (family_id,))
            interval_result = cur.fetchone()
            feed_interval = interval_result[0] if interval_result else 3
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è
            last_feeding = get_last_feeding_time_for_family(family_id)
            
            if last_feeding:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–π—Å–∫–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
                current_time = get_thai_time()
                time_since_last = current_time - last_feeding
                hours_since_last = time_since_last.total_seconds() / 3600
                minutes_since_last = time_since_last.total_seconds() / 60
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                if hours_since_last >= feed_interval:
                    # –ü–æ—Ä–∞ –∫–æ—Ä–º–∏—Ç—å!
                    if hours_since_last < (feed_interval + 0.5):  # –í –ø—Ä–µ–¥–µ–ª–∞—Ö 30 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
                        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏
                        cur.execute("SELECT user_id FROM family_members WHERE family_id = ?", (family_id,))
                        members = cur.fetchall()
                        
                        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
                        message = (
                            f"üçº **–í—Ä–µ–º—è –∫–æ—Ä–º–ª–µ–Ω–∏—è!**\n\n"
                            f"‚è∞ –ü—Ä–æ—à–ª–æ: {hours_since_last:.1f} —á. ({minutes_since_last:.0f} –º–∏–Ω.) —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è\n"
                            f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ: {last_feeding.strftime('%H:%M')}\n"
                            f"üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {feed_interval} —á.\n\n"
                            f"üí° –ü–æ—Ä–∞ –ø–æ–∫–æ—Ä–º–∏—Ç—å –º–∞–ª—ã—à–∞!\n\n"
                            f"üîÑ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏–µ:"
                        )
                        
                        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
                        buttons = [
                            [Button.inline("üçº –ö–æ—Ä–º–∏—Ç—å —Å–µ–π—á–∞—Å", b"feed_now")],
                            [Button.inline("15 –º–∏–Ω –Ω–∞–∑–∞–¥", b"feed_15")],
                            [Button.inline("30 –º–∏–Ω –Ω–∞–∑–∞–¥", b"feed_30")]
                        ]
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º —á–ª–µ–Ω–∞–º —Å–µ–º—å–∏
                        for (user_id,) in members:
                            try:
                                await client.send_message(user_id, message, buttons=buttons)
                                print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                            except Exception as e:
                                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                    
                    elif hours_since_last >= (feed_interval + 1):  # –ß–µ—Ä–µ–∑ —á–∞—Å –ø–æ—Å–ª–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ - —Å—Ä–æ—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏
                        cur.execute("SELECT user_id FROM family_members WHERE family_id = ?", (family_id,))
                        members = cur.fetchall()
                        
                        # –°—Ä–æ—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        urgent_message = (
                            f"üö® **–°–†–û–ß–ù–û! –î–æ–ª–≥–æ –Ω–µ –∫–æ—Ä–º–∏–ª–∏!**\n\n"
                            f"‚è∞ –ü—Ä–æ—à–ª–æ: {hours_since_last:.1f} —á. ({minutes_since_last:.0f} –º–∏–Ω.) —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è\n"
                            f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ: {last_feeding.strftime('%H:%M')}\n"
                            f"üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {feed_interval} —á.\n\n"
                            f"‚ö†Ô∏è –ú–∞–ª—ã—à –º–æ–∂–µ—Ç –±—ã—Ç—å –≥–æ–ª–æ–¥–µ–Ω! –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–æ–∫–æ—Ä–º–∏—Ç–µ!"
                        )
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–æ—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º —á–ª–µ–Ω–∞–º —Å–µ–º—å–∏
                        for (user_id,) in members:
                            try:
                                await client.send_message(user_id, urgent_message)
                                print(f"üö® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Ä–æ—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                            except Exception as e:
                                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ä–æ—á–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                
                elif hours_since_last >= (feed_interval - 0.25):  # –ó–∞ 15 –º–∏–Ω—É—Ç –¥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ - –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏
                    cur.execute("SELECT user_id FROM family_members WHERE family_id = ?", (family_id,))
                    members = cur.fetchall()
                    
                    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    pre_message = (
                        f"‚è∞ **–°–∫–æ—Ä–æ –≤—Ä–µ–º—è –∫–æ—Ä–º–ª–µ–Ω–∏—è**\n\n"
                        f"‚è∞ –ü—Ä–æ—à–ª–æ: {hours_since_last:.1f} —á. ({minutes_since_last:.0f} –º–∏–Ω.) —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è\n"
                        f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ: {last_feeding.strftime('%H:%M')}\n"
                        f"üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {feed_interval} —á.\n\n"
                        f"üí° –ß–µ—Ä–µ–∑ {feed_interval - hours_since_last:.1f} —á. –ø–æ—Ä–∞ –±—É–¥–µ—Ç –∫–æ—Ä–º–∏—Ç—å –º–∞–ª—ã—à–∞"
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º —á–ª–µ–Ω–∞–º —Å–µ–º—å–∏
                    for (user_id,) in members:
                        try:
                            await client.send_message(user_id, pre_message)
                            print(f"‚è∞ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                        except Exception as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        conn.close()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ send_scheduled_feeding_reminders: {e}")

@scheduler.scheduled_job('interval', minutes=15)
async def send_scheduled_diaper_reminders():
    """–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å–º–µ–Ω–µ –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
    try:
        conn = sqlite3.connect("babybot.db")
        cur = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ–º—å–∏ —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
        cur.execute("SELECT family_id FROM settings WHERE tips_enabled = 1")
        families = cur.fetchall()
        
        for (family_id,) in families:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–º–µ–Ω—ã –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞
            cur.execute("SELECT diaper_interval FROM settings WHERE family_id = ?", (family_id,))
            interval_result = cur.fetchone()
            diaper_interval = interval_result[0] if interval_result else 2
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–º–µ–Ω—ã –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞
            last_diaper = get_last_diaper_change_for_family(family_id)
            
            if last_diaper:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–π—Å–∫–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
                current_time = get_thai_time()
                time_since_last = current_time - last_diaper
                hours_since_last = time_since_last.total_seconds() / 3600
                minutes_since_last = time_since_last.total_seconds() / 60
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                if hours_since_last >= diaper_interval:
                    # –ü–æ—Ä–∞ –º–µ–Ω—è—Ç—å –ø–æ–¥–≥—É–∑–Ω–∏–∫!
                    if hours_since_last < (diaper_interval + 0.5):  # –í –ø—Ä–µ–¥–µ–ª–∞—Ö 30 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
                        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏
                        cur.execute("SELECT user_id FROM family_members WHERE family_id = ?", (family_id,))
                        members = cur.fetchall()
                        
                        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
                        message = (
                            f"üß∑ **–í—Ä–µ–º—è —Å–º–µ–Ω–∏—Ç—å –ø–æ–¥–≥—É–∑–Ω–∏–∫!**\n\n"
                            f"‚è∞ –ü—Ä–æ—à–ª–æ: {hours_since_last:.1f} —á. ({minutes_since_last:.0f} –º–∏–Ω.) —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–º–µ–Ω—ã\n"
                            f"üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–º–µ–Ω–∞: {last_diaper.strftime('%H:%M')}\n"
                            f"üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {diaper_interval} —á.\n\n"
                            f"üí° –ü–æ—Ä–∞ —Å–º–µ–Ω–∏—Ç—å –ø–æ–¥–≥—É–∑–Ω–∏–∫ –º–∞–ª—ã—à—É!\n\n"
                            f"üîÑ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Å–º–µ–Ω—É:"
                        )
                        
                        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
                        buttons = [
                            [Button.inline("üß∑ –°–º–µ–Ω–∏—Ç—å —Å–µ–π—á–∞—Å", b"diaper_now")],
                            [Button.inline("15 –º–∏–Ω –Ω–∞–∑–∞–¥", b"diaper_15")],
                            [Button.inline("30 –º–∏–Ω –Ω–∞–∑–∞–¥", b"diaper_30")]
                        ]
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º —á–ª–µ–Ω–∞–º —Å–µ–º—å–∏
                        for (user_id,) in members:
                            try:
                                await client.send_message(user_id, message, buttons=buttons)
                                print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                            except Exception as e:
                                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–º–µ–Ω–µ –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                    
                    elif hours_since_last >= (diaper_interval + 1):  # –ß–µ—Ä–µ–∑ —á–∞—Å –ø–æ—Å–ª–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ - —Å—Ä–æ—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏
                        cur.execute("SELECT user_id FROM family_members WHERE family_id = ?", (family_id,))
                        members = cur.fetchall()
                        
                        # –°—Ä–æ—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        urgent_message = (
                            f"üö® **–°–†–û–ß–ù–û! –î–æ–ª–≥–æ –Ω–µ –º–µ–Ω—è–ª–∏ –ø–æ–¥–≥—É–∑–Ω–∏–∫!**\n\n"
                            f"‚è∞ –ü—Ä–æ—à–ª–æ: {hours_since_last:.1f} —á. ({minutes_since_last:.0f} –º–∏–Ω.) —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–º–µ–Ω—ã\n"
                            f"üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–º–µ–Ω–∞: {last_diaper.strftime('%H:%M')}\n"
                            f"üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {diaper_interval} —á.\n\n"
                            f"‚ö†Ô∏è –ú–∞–ª—ã—à –º–æ–∂–µ—Ç –∏—Å–ø—ã—Ç—ã–≤–∞—Ç—å –¥–∏—Å–∫–æ–º—Ñ–æ—Ä—Ç! –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Å–º–µ–Ω–∏—Ç–µ –ø–æ–¥–≥—É–∑–Ω–∏–∫!"
                        )
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–æ—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º —á–ª–µ–Ω–∞–º —Å–µ–º—å–∏
                        for (user_id,) in members:
                            try:
                                await client.send_message(user_id, urgent_message)
                                print(f"üö® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Ä–æ—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                            except Exception as e:
                                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ä–æ—á–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–º–µ–Ω–µ –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                
                elif hours_since_last >= (diaper_interval - 0.25):  # –ó–∞ 15 –º–∏–Ω—É—Ç –¥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ - –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏
                    cur.execute("SELECT user_id FROM family_members WHERE family_id = ?", (family_id,))
                    members = cur.fetchall()
                    
                    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    pre_message = (
                        f"‚è∞ **–°–∫–æ—Ä–æ –≤—Ä–µ–º—è —Å–º–µ–Ω–∏—Ç—å –ø–æ–¥–≥—É–∑–Ω–∏–∫**\n\n"
                        f"‚è∞ –ü—Ä–æ—à–ª–æ: {hours_since_last:.1f} —á. ({minutes_since_last:.0f} –º–∏–Ω.) —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–º–µ–Ω—ã\n"
                        f"üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–º–µ–Ω–∞: {last_diaper.strftime('%H:%M')}\n"
                        f"üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {diaper_interval} —á.\n\n"
                        f"üí° –ß–µ—Ä–µ–∑ {diaper_interval - hours_since_last:.1f} —á. –ø–æ—Ä–∞ –±—É–¥–µ—Ç –º–µ–Ω—è—Ç—å –ø–æ–¥–≥—É–∑–Ω–∏–∫"
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º —á–ª–µ–Ω–∞–º —Å–µ–º—å–∏
                    for (user_id,) in members:
                        try:
                            await client.send_message(user_id, pre_message)
                            print(f"‚è∞ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                        except Exception as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–º–µ–Ω–µ –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        conn.close()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ send_scheduled_diaper_reminders: {e}")

# –ù–æ–≤—ã–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ –¥–ª—è –∫—É–ø–∞–Ω–∏—è, –∏–≥—Ä –∏ —Å–Ω–∞
@scheduler.scheduled_job('interval', minutes=30)
async def send_bath_reminders():
    """–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∫—É–ø–∞–Ω–∏–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
    try:
        current_time = get_thai_time()
        current_hour = current_time.hour
        current_minute = current_time.minute
        
        conn = sqlite3.connect("babybot.db")
        cur = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ–º—å–∏ —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –æ –∫—É–ø–∞–Ω–∏–∏
        cur.execute("SELECT family_id, bath_reminder_hour, bath_reminder_minute, bath_reminder_period FROM settings WHERE bath_reminder_enabled = 1")
        families = cur.fetchall()
        
        for (family_id, reminder_hour, reminder_minute, period) in families:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ä–∞ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∫—É–ø–∞–Ω–∏–∏
            if current_hour == reminder_hour and current_minute == reminder_minute:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫—É–ø–∞–Ω–∏—è
                last_bath = get_last_bath_time_for_family(family_id)
                
                if last_bath:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
                    days_since_last = (current_time - last_bath).days
                    
                    if days_since_last >= period:
                        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏
                        cur.execute("SELECT user_id FROM family_members WHERE family_id = ?", (family_id,))
                        members = cur.fetchall()
                        
                        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –ø–µ—Ä–µ–Ω–æ—Å–∞
                        message = (
                            f"üõÅ **–í—Ä–µ–º—è –∫—É–ø–∞–Ω–∏—è!**\n\n"
                            f"‚è∞ –ü—Ä–æ—à–ª–æ: {days_since_last} –¥–Ω–µ–π —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫—É–ø–∞–Ω–∏—è\n"
                            f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∫—É–ø–∞–Ω–∏–µ: {last_bath.strftime('%d.%m –≤ %H:%M')}\n"
                            f"üîÑ –ü–µ—Ä–∏–æ–¥: {period} –¥–µ–Ω—å(–µ–π)\n\n"
                            f"üí° –ü–æ—Ä–∞ –∏—Å–∫—É–ø–∞—Ç—å –º–∞–ª—ã—à–∞!\n\n"
                            f"üîÑ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –∫—É–ø–∞–Ω–∏–µ:"
                        )
                        
                        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
                        buttons = [
                            [Button.inline("üõÅ –ö—É–ø–∞—Ç—å —Å–µ–π—á–∞—Å", b"bath_now")],
                            [Button.inline("15 –º–∏–Ω –Ω–∞–∑–∞–¥", b"bath_15")],
                            [Button.inline("30 –º–∏–Ω –Ω–∞–∑–∞–¥", b"bath_30")]
                        ]
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º —á–ª–µ–Ω–∞–º —Å–µ–º—å–∏
                        for (user_id,) in members:
                            try:
                                await client.send_message(user_id, message, buttons=buttons)
                                print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∫—É–ø–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                            except Exception as e:
                                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∫—É–ø–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                else:
                    # –ü–µ—Ä–≤–æ–µ –∫—É–ø–∞–Ω–∏–µ
                    cur.execute("SELECT user_id FROM family_members WHERE family_id = ?", (family_id,))
                    members = cur.fetchall()
                    
                    message = (
                        f"üõÅ **–ü–µ—Ä–≤–æ–µ –∫—É–ø–∞–Ω–∏–µ!**\n\n"
                        f"üë∂ –ü–æ—Ä–∞ –Ω–∞—á–∞—Ç—å –∫—É–ø–∞—Ç—å –º–∞–ª—ã—à–∞\n"
                        f"üîÑ –ü–µ—Ä–∏–æ–¥: {period} –¥–µ–Ω—å(–µ–π)\n\n"
                        f"üí° –ó–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–≤–æ–µ –∫—É–ø–∞–Ω–∏–µ!"
                    )
                    
                    buttons = [
                        [Button.inline("üõÅ –ö—É–ø–∞—Ç—å —Å–µ–π—á–∞—Å", b"bath_now")]
                    ]
                    
                    for (user_id,) in members:
                        try:
                            await client.send_message(user_id, message, buttons=buttons)
                            print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–µ—Ä–≤–æ–º –∫—É–ø–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                        except Exception as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–µ—Ä–≤–æ–º –∫—É–ø–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        conn.close()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ send_bath_reminders: {e}")

@scheduler.scheduled_job('interval', minutes=15)
async def send_smart_activity_reminders():
    """–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –∏–≥—Ä–∞—Ö - –Ω–µ —Ä–∞–Ω—å—à–µ —á–µ–º –∑–∞ 20 –º–∏–Ω—É—Ç –¥–æ –µ–¥—ã"""
    try:
        conn = sqlite3.connect("babybot.db")
        cur = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ–º—å–∏ —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –æ–± –∏–≥—Ä–∞—Ö
        cur.execute("SELECT family_id, activity_reminder_interval, baby_age_months FROM settings WHERE activity_reminder_enabled = 1")
        families = cur.fetchall()
        
        for (family_id, interval, age_months) in families:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            last_activity = get_last_activity_time_for_family(family_id, "tummy_time")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –∫–æ—Ä–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–π —Å–µ–º—å–∏
            cur.execute("SELECT feed_interval FROM settings WHERE family_id = ?", (family_id,))
            feed_interval_result = cur.fetchone()
            feed_interval = feed_interval_result[0] if feed_interval_result else 3
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è
            last_feeding = get_last_feeding_time_for_family(family_id)
            
            if last_activity and last_feeding:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–π—Å–∫–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
                current_time = get_thai_time()
                time_since_last_activity = current_time - last_activity
                time_since_last_feeding = current_time - last_feeding
                
                hours_since_last_activity = time_since_last_activity.total_seconds() / 3600
                hours_since_last_feeding = time_since_last_feeding.total_seconds() / 3600
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ä–∞ –ª–∏ –∏–≥—Ä–∞—Ç—å (–ø–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)
                if hours_since_last_activity >= interval:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ –±–ª–∏–∑–∫–æ –∫ –∫–æ—Ä–º–ª–µ–Ω–∏—é (–Ω–µ —Ä–∞–Ω—å—à–µ —á–µ–º –∑–∞ 20 –º–∏–Ω—É—Ç)
                    minutes_until_feeding = (feed_interval - hours_since_last_feeding) * 60
                    
                    if minutes_until_feeding >= 20:  # –ù–µ —Ä–∞–Ω—å—à–µ —á–µ–º –∑–∞ 20 –º–∏–Ω—É—Ç –¥–æ –µ–¥—ã
                        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏
                        cur.execute("SELECT user_id FROM family_members WHERE family_id = ?", (family_id,))
                        members = cur.fetchall()
                        
                        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
                        activities = get_age_appropriate_activities(age_months)
                        
                        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
                        message = (
                            f"üéÆ **–í—Ä–µ–º—è –∏–≥—Ä –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π!**\n\n"
                            f"‚è∞ –ü—Ä–æ—à–ª–æ: {hours_since_last_activity:.1f} —á. —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
                            f"üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_activity.strftime('%H:%M')}\n"
                            f"üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval} —á.\n"
                            f"üë∂ –í–æ–∑—Ä–∞—Å—Ç: {age_months} –º–µ—Å.\n"
                            f"üçº –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è: {minutes_until_feeding:.0f} –º–∏–Ω.\n\n"
                            f"üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤–∞—à–µ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞:**\n"
                            f"ü¶µ –í—ã–∫–ª–∞–¥—ã–≤–∞–Ω–∏–µ –Ω–∞ –∂–∏–≤–æ—Ç: {activities['tummy_time']}\n"
                            f"üéØ –ò–≥—Ä—ã: {activities['play']}\n"
                            f"üíÜ –ú–∞—Å—Å–∞–∂: {activities['massage']}\n\n"
                            f"üîÑ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:"
                        )
                        
                        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
                        buttons = [
                            [Button.inline("ü¶µ –í—ã–∫–ª–∞–¥—ã–≤–∞–Ω–∏–µ –Ω–∞ –∂–∏–≤–æ—Ç", b"activity_tummy")],
                            [Button.inline("üéØ –ò–≥—Ä–∞—Ç—å —Å–µ–π—á–∞—Å", b"activity_play")],
                            [Button.inline("üíÜ –ú–∞—Å—Å–∞–∂", b"activity_massage")]
                        ]
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º —á–ª–µ–Ω–∞–º —Å–µ–º—å–∏
                        for (user_id,) in members:
                            try:
                                await client.send_message(user_id, message, buttons=buttons)
                                print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–º–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –∏–≥—Ä–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                            except Exception as e:
                                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–º–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –∏–≥—Ä–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            elif not last_activity and last_feeding:
                # –ü–µ—Ä–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –¥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è
                current_time = get_thai_time()
                time_since_last_feeding = current_time - last_feeding
                hours_since_last_feeding = time_since_last_feeding.total_seconds() / 3600
                minutes_until_feeding = (feed_interval - hours_since_last_feeding) * 60
                
                if minutes_until_feeding >= 20:  # –ù–µ —Ä–∞–Ω—å—à–µ —á–µ–º –∑–∞ 20 –º–∏–Ω—É—Ç –¥–æ –µ–¥—ã
                    cur.execute("SELECT user_id FROM family_members WHERE family_id = ?", (family_id,))
                    members = cur.fetchall()
                    
                    activities = get_age_appropriate_activities(age_months)
                    
                    message = (
                        f"üéÆ **–ü–µ—Ä–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!**\n\n"
                        f"üë∂ –ü–æ—Ä–∞ –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å —Å –º–∞–ª—ã—à–æ–º\n"
                        f"üîÑ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {interval} —á.\n"
                        f"üë∂ –í–æ–∑—Ä–∞—Å—Ç: {age_months} –º–µ—Å.\n"
                        f"üçº –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è: {minutes_until_feeding:.0f} –º–∏–Ω.\n\n"
                        f"üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤–∞—à–µ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞:**\n"
                        f"ü¶µ –í—ã–∫–ª–∞–¥—ã–≤–∞–Ω–∏–µ –Ω–∞ –∂–∏–≤–æ—Ç: {activities['tummy_time']}\n"
                        f"üéØ –ò–≥—Ä—ã: {activities['play']}\n"
                        f"üíÜ –ú–∞—Å—Å–∞–∂: {activities['massage']}\n\n"
                        f"üîÑ –ù–∞—á–Ω–∏—Ç–µ —Å –≤—ã–∫–ª–∞–¥—ã–≤–∞–Ω–∏—è –Ω–∞ –∂–∏–≤–æ—Ç!"
                    )
                    
                    buttons = [
                        [Button.inline("ü¶µ –í—ã–∫–ª–∞–¥—ã–≤–∞–Ω–∏–µ –Ω–∞ –∂–∏–≤–æ—Ç", b"activity_tummy")],
                        [Button.inline("üéØ –ò–≥—Ä–∞—Ç—å —Å–µ–π—á–∞—Å", b"activity_play")],
                        [Button.inline("üíÜ –ú–∞—Å—Å–∞–∂", b"activity_massage")]
                    ]
                    
                    for (user_id,) in members:
                        try:
                            await client.send_message(user_id, message, buttons=buttons)
                            print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–º–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–µ—Ä–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                        except Exception as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–º–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–µ—Ä–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        conn.close()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ send_smart_activity_reminders: {e}")

@scheduler.scheduled_job('interval', minutes=15)
async def monitor_sleep_and_feeding():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —Å–æ–Ω –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—Ç—å –æ –∫–æ—Ä–º–ª–µ–Ω–∏–∏"""
    try:
        conn = sqlite3.connect("babybot.db")
        cur = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ–º—å–∏ —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º —Å–Ω–∞
        cur.execute("SELECT family_id FROM settings WHERE sleep_monitoring_enabled = 1")
        families = cur.fetchall()
        
        for (family_id,) in families:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é —Å–Ω–∞
            active_sleep = get_active_sleep_session(family_id)
            
            if active_sleep:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –∫–æ—Ä–º–ª–µ–Ω–∏—è
                cur.execute("SELECT feed_interval FROM settings WHERE family_id = ?", (family_id,))
                interval_result = cur.fetchone()
                feed_interval = interval_result[0] if interval_result else 3
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Ä–∞–∑–±—É–¥–∏—Ç—å –¥–ª—è –∫–æ—Ä–º–ª–µ–Ω–∏—è
                should_wake = should_wake_for_feeding(active_sleep["start_time"], feed_interval)
                
                if should_wake:
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏
                    cur.execute("SELECT user_id FROM family_members WHERE family_id = ?", (family_id,))
                    members = cur.fetchall()
                    
                    sleep_duration = get_thai_time() - active_sleep["start_time"]
                    hours = int(sleep_duration.total_seconds() // 3600)
                    minutes = int((sleep_duration.total_seconds() % 3600) // 60)
                    
                    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –∫–æ—Ä–º–ª–µ–Ω–∏–∏
                    warning_message = (
                        f"‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï! –ú–∞–ª—ã—à —Å–ø–∏—Ç –¥–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∫–æ—Ä–º–ª–µ–Ω–∏—è!**\n\n"
                        f"üò¥ –ú–∞–ª—ã—à —Å–ø–∏—Ç —É–∂–µ: {hours}—á {minutes}–º\n"
                        f"‚è∞ –ù–∞—á–∞–ª–æ —Å–Ω–∞: {active_sleep['start_time'].strftime('%H:%M')}\n"
                        f"üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª –∫–æ—Ä–º–ª–µ–Ω–∏—è: {feed_interval} —á.\n\n"
                        f"üçº **–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–∞–∑–±—É–¥–∏—Ç—å –¥–ª—è –∫–æ—Ä–º–ª–µ–Ω–∏—è!**\n\n"
                        f"üí° –ú–∞–ª—ã—à –º–æ–∂–µ—Ç –ø—Ä–æ—Å–Ω—É—Ç—å—Å—è –≥–æ–ª–æ–¥–Ω—ã–º, –µ—Å–ª–∏ —Å–æ–Ω –≤—ã–ø–∞–¥–∞–µ—Ç –Ω–∞ –∫–æ—Ä–º–ª–µ–Ω–∏–µ"
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤—Å–µ–º —á–ª–µ–Ω–∞–º —Å–µ–º—å–∏
                    for (user_id,) in members:
                        try:
                            await client.send_message(user_id, warning_message)
                            print(f"‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Å–Ω–µ –∏ –∫–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                        except Exception as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ —Å–Ω–µ –∏ –∫–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        conn.close()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ monitor_sleep_and_feeding: {e}")

class HealthCheckHandler(http.server.BaseHTTPRequestHandler):
    def do_GET(self):
        current_time = time.strftime('%Y-%m-%d %H:%M:%S')
        
        if self.path == '/':
            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.end_headers()
            response = f"""
            <html>
            <head><title>BabyCareBot Health Check</title></head>
            <body>
                <h1>üçº BabyCareBot</h1>
                <p>Status: ‚úÖ Running</p>
                <p>Time: {current_time}</p>
                <p>Bot is working in background</p>
                <p>Last Activity: {current_time}</p>
                <p>Uptime: Active</p>
                <p>Render Keep-Alive: Active</p>
            </body>
            </html>
            """
            self.wfile.write(response.encode())
        elif self.path == '/health':
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            response = f'{{"status": "healthy", "service": "babycare-bot", "timestamp": "{current_time}", "uptime": "active", "render_keepalive": "active"}}'
            self.wfile.write(response.encode())
        elif self.path == '/ping':
            # –ü—Ä–æ—Å—Ç–æ–π ping –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            self.send_response(200)
            self.send_header('Content-type', 'text/plain')
            self.end_headers()
            self.wfile.write(f"pong {current_time}".encode())
        elif self.path == '/status':
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            response = f'{{"status": "healthy", "bot": "running", "timestamp": "{current_time}", "health": "ok", "render_keepalive": "active"}}'
            self.wfile.write(response.encode())
        elif self.path == '/render-ping':
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π endpoint –¥–ª—è Render
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            response = f'{{"status": "ok", "service": "babycare-bot", "timestamp": "{current_time}", "render": "active"}}'
            self.wfile.write(response.encode())
        else:
            self.send_response(404)
            self.end_headers()

def start_health_server(port=8000):
    """–ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è health checks"""
    try:
        with socketserver.TCPServer(("", port), HealthCheckHandler) as httpd:
            print(f"üåê Health check server started on port {port}")
            print(f"üîó Health check URLs:")
            print(f"   ‚Ä¢ Main: http://localhost:{port}/")
            print(f"   ‚Ä¢ Health: http://localhost:{port}/health")
            print(f"   ‚Ä¢ Ping: http://localhost:{port}/ping")
            print(f"   ‚Ä¢ Status: http://localhost:{port}/status")
            httpd.serve_forever()
    except Exception as e:
        print(f"‚ùå Health check server error: {e}")

async def start_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è
        me = await client.get_me()
        print(f"‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{me.username}")
        print(f"üÜî ID –±–æ—Ç–∞: {me.id}")
        print(f"üìù –ò–º—è –±–æ—Ç–∞: {me.first_name}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º health —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        health_thread = threading.Thread(target=start_health_server, daemon=True)
        health_thread.start()
        print("üåê Health check server started")
        
        scheduler.start()
        print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await client.run_until_disconnected()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        print("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞")
        raise e

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫ BabyCareBot...")
        print(f"üîë API_ID: {API_ID}")
        print(f"üîë API_HASH: {API_HASH[:10]}...")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 —Å–∏–º–≤–æ–ª–æ–≤
        print(f"üîë BOT_TOKEN: {BOT_TOKEN[:10]}...")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 —Å–∏–º–≤–æ–ª–æ–≤
        
        with client:
            client.loop.run_until_complete(start_bot())
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
        import traceback
        traceback.print_exc()
